// Code generated by entc, DO NOT EDIT.

package patient

const (
	// Label holds the string label denoting the patient type in the database.
	Label = "patient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPatientID holds the string denoting the patient_id field in the database.
	FieldPatientID = "patient_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCardID holds the string denoting the cardid field in the database.
	FieldCardID = "card_id"
	// FieldTel holds the string denoting the tel field in the database.
	FieldTel = "tel"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"

	// EdgeGender holds the string denoting the gender edge name in mutations.
	EdgeGender = "gender"
	// EdgeMedicalcare holds the string denoting the medicalcare edge name in mutations.
	EdgeMedicalcare = "medicalcare"
	// EdgeNurse holds the string denoting the nurse edge name in mutations.
	EdgeNurse = "nurse"
	// EdgeDisease holds the string denoting the disease edge name in mutations.
	EdgeDisease = "disease"
	// EdgeMedicalfiles holds the string denoting the medicalfiles edge name in mutations.
	EdgeMedicalfiles = "medicalfiles"
	// EdgeQueue holds the string denoting the queue edge name in mutations.
	EdgeQueue = "queue"
	// EdgeAppointment holds the string denoting the appointment edge name in mutations.
	EdgeAppointment = "appointment"

	// Table holds the table name of the patient in the database.
	Table = "patients"
	// GenderTable is the table the holds the gender relation/edge.
	GenderTable = "patients"
	// GenderInverseTable is the table name for the Gender entity.
	// It exists in this package in order to avoid circular dependency with the "gender" package.
	GenderInverseTable = "genders"
	// GenderColumn is the table column denoting the gender relation/edge.
	GenderColumn = "gender_id"
	// MedicalcareTable is the table the holds the medicalcare relation/edge.
	MedicalcareTable = "patients"
	// MedicalcareInverseTable is the table name for the MedicalCare entity.
	// It exists in this package in order to avoid circular dependency with the "medicalcare" package.
	MedicalcareInverseTable = "medical_cares"
	// MedicalcareColumn is the table column denoting the medicalcare relation/edge.
	MedicalcareColumn = "medicalcare_id"
	// NurseTable is the table the holds the nurse relation/edge.
	NurseTable = "patients"
	// NurseInverseTable is the table name for the Nurse entity.
	// It exists in this package in order to avoid circular dependency with the "nurse" package.
	NurseInverseTable = "nurses"
	// NurseColumn is the table column denoting the nurse relation/edge.
	NurseColumn = "nurse_id"
	// DiseaseTable is the table the holds the disease relation/edge.
	DiseaseTable = "patients"
	// DiseaseInverseTable is the table name for the Disease entity.
	// It exists in this package in order to avoid circular dependency with the "disease" package.
	DiseaseInverseTable = "diseases"
	// DiseaseColumn is the table column denoting the disease relation/edge.
	DiseaseColumn = "disease_id"
	// MedicalfilesTable is the table the holds the medicalfiles relation/edge.
	MedicalfilesTable = "medicalfiles"
	// MedicalfilesInverseTable is the table name for the Medicalfile entity.
	// It exists in this package in order to avoid circular dependency with the "medicalfile" package.
	MedicalfilesInverseTable = "medicalfiles"
	// MedicalfilesColumn is the table column denoting the medicalfiles relation/edge.
	MedicalfilesColumn = "patient_id"
	// QueueTable is the table the holds the queue relation/edge.
	QueueTable = "queues"
	// QueueInverseTable is the table name for the Queue entity.
	// It exists in this package in order to avoid circular dependency with the "queue" package.
	QueueInverseTable = "queues"
	// QueueColumn is the table column denoting the queue relation/edge.
	QueueColumn = "patient_id"
	// AppointmentTable is the table the holds the appointment relation/edge.
	AppointmentTable = "appointments"
	// AppointmentInverseTable is the table name for the Appointment entity.
	// It exists in this package in order to avoid circular dependency with the "appointment" package.
	AppointmentInverseTable = "appointments"
	// AppointmentColumn is the table column denoting the appointment relation/edge.
	AppointmentColumn = "patient_id"
)

// Columns holds all SQL columns for patient fields.
var Columns = []string{
	FieldID,
	FieldPatientID,
	FieldName,
	FieldCardID,
	FieldTel,
	FieldAge,
	FieldBirthday,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Patient type.
var ForeignKeys = []string{
	"disease_id",
	"gender_id",
	"medicalcare_id",
	"nurse_id",
}

var (
	// PatientIDValidator is a validator for the "patient_ID" field. It is called by the builders before save.
	PatientIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CardIDValidator is a validator for the "cardID" field. It is called by the builders before save.
	CardIDValidator func(string) error
	// TelValidator is a validator for the "tel" field. It is called by the builders before save.
	TelValidator func(string) error
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
)
