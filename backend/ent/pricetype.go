// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team03/app/ent/pricetype"
)

// Pricetype is the model entity for the Pricetype schema.
type Pricetype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PricetypeQuery when eager-loading is set.
	Edges PricetypeEdges `json:"edges"`
}

// PricetypeEdges holds the relations/edges for other nodes in the graph.
type PricetypeEdges struct {
	// Dentalexpenses holds the value of the dentalexpenses edge.
	Dentalexpenses []*Dentalexpense
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DentalexpensesOrErr returns the Dentalexpenses value or an error if the edge
// was not loaded in eager-loading.
func (e PricetypeEdges) DentalexpensesOrErr() ([]*Dentalexpense, error) {
	if e.loadedTypes[0] {
		return e.Dentalexpenses, nil
	}
	return nil, &NotLoadedError{edge: "dentalexpenses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pricetype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pricetype fields.
func (pr *Pricetype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(pricetype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		pr.Name = value.String
	}
	return nil
}

// QueryDentalexpenses queries the dentalexpenses edge of the Pricetype.
func (pr *Pricetype) QueryDentalexpenses() *DentalexpenseQuery {
	return (&PricetypeClient{config: pr.config}).QueryDentalexpenses(pr)
}

// Update returns a builder for updating this Pricetype.
// Note that, you need to call Pricetype.Unwrap() before calling this method, if this Pricetype
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Pricetype) Update() *PricetypeUpdateOne {
	return (&PricetypeClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Pricetype) Unwrap() *Pricetype {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pricetype is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Pricetype) String() string {
	var builder strings.Builder
	builder.WriteString("Pricetype(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Pricetypes is a parsable slice of Pricetype.
type Pricetypes []*Pricetype

func (pr Pricetypes) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
