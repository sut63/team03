// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team03/app/ent/dentalexpense"
	"github.com/team03/app/ent/medicalfile"
	"github.com/team03/app/ent/nurse"
	"github.com/team03/app/ent/predicate"
	"github.com/team03/app/ent/pricetype"
)

// DentalExpenseQuery is the builder for querying DentalExpense entities.
type DentalExpenseQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.DentalExpense
	// eager-loading edges.
	withNurse       *NurseQuery
	withMedicalfile *MedicalfileQuery
	withPricetype   *PriceTypeQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (deq *DentalExpenseQuery) Where(ps ...predicate.DentalExpense) *DentalExpenseQuery {
	deq.predicates = append(deq.predicates, ps...)
	return deq
}

// Limit adds a limit step to the query.
func (deq *DentalExpenseQuery) Limit(limit int) *DentalExpenseQuery {
	deq.limit = &limit
	return deq
}

// Offset adds an offset step to the query.
func (deq *DentalExpenseQuery) Offset(offset int) *DentalExpenseQuery {
	deq.offset = &offset
	return deq
}

// Order adds an order step to the query.
func (deq *DentalExpenseQuery) Order(o ...OrderFunc) *DentalExpenseQuery {
	deq.order = append(deq.order, o...)
	return deq
}

// QueryNurse chains the current query on the nurse edge.
func (deq *DentalExpenseQuery) QueryNurse() *NurseQuery {
	query := &NurseQuery{config: deq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := deq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dentalexpense.Table, dentalexpense.FieldID, deq.sqlQuery()),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dentalexpense.NurseTable, dentalexpense.NurseColumn),
		)
		fromU = sqlgraph.SetNeighbors(deq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedicalfile chains the current query on the medicalfile edge.
func (deq *DentalExpenseQuery) QueryMedicalfile() *MedicalfileQuery {
	query := &MedicalfileQuery{config: deq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := deq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dentalexpense.Table, dentalexpense.FieldID, deq.sqlQuery()),
			sqlgraph.To(medicalfile.Table, medicalfile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dentalexpense.MedicalfileTable, dentalexpense.MedicalfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(deq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPricetype chains the current query on the pricetype edge.
func (deq *DentalExpenseQuery) QueryPricetype() *PriceTypeQuery {
	query := &PriceTypeQuery{config: deq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := deq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dentalexpense.Table, dentalexpense.FieldID, deq.sqlQuery()),
			sqlgraph.To(pricetype.Table, pricetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dentalexpense.PricetypeTable, dentalexpense.PricetypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(deq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DentalExpense entity in the query. Returns *NotFoundError when no dentalexpense was found.
func (deq *DentalExpenseQuery) First(ctx context.Context) (*DentalExpense, error) {
	des, err := deq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(des) == 0 {
		return nil, &NotFoundError{dentalexpense.Label}
	}
	return des[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (deq *DentalExpenseQuery) FirstX(ctx context.Context) *DentalExpense {
	de, err := deq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return de
}

// FirstID returns the first DentalExpense id in the query. Returns *NotFoundError when no id was found.
func (deq *DentalExpenseQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = deq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dentalexpense.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (deq *DentalExpenseQuery) FirstXID(ctx context.Context) int {
	id, err := deq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only DentalExpense entity in the query, returns an error if not exactly one entity was returned.
func (deq *DentalExpenseQuery) Only(ctx context.Context) (*DentalExpense, error) {
	des, err := deq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(des) {
	case 1:
		return des[0], nil
	case 0:
		return nil, &NotFoundError{dentalexpense.Label}
	default:
		return nil, &NotSingularError{dentalexpense.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (deq *DentalExpenseQuery) OnlyX(ctx context.Context) *DentalExpense {
	de, err := deq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return de
}

// OnlyID returns the only DentalExpense id in the query, returns an error if not exactly one id was returned.
func (deq *DentalExpenseQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = deq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = &NotSingularError{dentalexpense.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (deq *DentalExpenseQuery) OnlyIDX(ctx context.Context) int {
	id, err := deq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DentalExpenses.
func (deq *DentalExpenseQuery) All(ctx context.Context) ([]*DentalExpense, error) {
	if err := deq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return deq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (deq *DentalExpenseQuery) AllX(ctx context.Context) []*DentalExpense {
	des, err := deq.All(ctx)
	if err != nil {
		panic(err)
	}
	return des
}

// IDs executes the query and returns a list of DentalExpense ids.
func (deq *DentalExpenseQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := deq.Select(dentalexpense.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (deq *DentalExpenseQuery) IDsX(ctx context.Context) []int {
	ids, err := deq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (deq *DentalExpenseQuery) Count(ctx context.Context) (int, error) {
	if err := deq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return deq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (deq *DentalExpenseQuery) CountX(ctx context.Context) int {
	count, err := deq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (deq *DentalExpenseQuery) Exist(ctx context.Context) (bool, error) {
	if err := deq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return deq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (deq *DentalExpenseQuery) ExistX(ctx context.Context) bool {
	exist, err := deq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (deq *DentalExpenseQuery) Clone() *DentalExpenseQuery {
	return &DentalExpenseQuery{
		config:     deq.config,
		limit:      deq.limit,
		offset:     deq.offset,
		order:      append([]OrderFunc{}, deq.order...),
		unique:     append([]string{}, deq.unique...),
		predicates: append([]predicate.DentalExpense{}, deq.predicates...),
		// clone intermediate query.
		sql:  deq.sql.Clone(),
		path: deq.path,
	}
}

//  WithNurse tells the query-builder to eager-loads the nodes that are connected to
// the "nurse" edge. The optional arguments used to configure the query builder of the edge.
func (deq *DentalExpenseQuery) WithNurse(opts ...func(*NurseQuery)) *DentalExpenseQuery {
	query := &NurseQuery{config: deq.config}
	for _, opt := range opts {
		opt(query)
	}
	deq.withNurse = query
	return deq
}

//  WithMedicalfile tells the query-builder to eager-loads the nodes that are connected to
// the "medicalfile" edge. The optional arguments used to configure the query builder of the edge.
func (deq *DentalExpenseQuery) WithMedicalfile(opts ...func(*MedicalfileQuery)) *DentalExpenseQuery {
	query := &MedicalfileQuery{config: deq.config}
	for _, opt := range opts {
		opt(query)
	}
	deq.withMedicalfile = query
	return deq
}

//  WithPricetype tells the query-builder to eager-loads the nodes that are connected to
// the "pricetype" edge. The optional arguments used to configure the query builder of the edge.
func (deq *DentalExpenseQuery) WithPricetype(opts ...func(*PriceTypeQuery)) *DentalExpenseQuery {
	query := &PriceTypeQuery{config: deq.config}
	for _, opt := range opts {
		opt(query)
	}
	deq.withPricetype = query
	return deq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AddedTime time.Time `json:"added_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DentalExpense.Query().
//		GroupBy(dentalexpense.FieldAddedTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (deq *DentalExpenseQuery) GroupBy(field string, fields ...string) *DentalExpenseGroupBy {
	group := &DentalExpenseGroupBy{config: deq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := deq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return deq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		AddedTime time.Time `json:"added_time,omitempty"`
//	}
//
//	client.DentalExpense.Query().
//		Select(dentalexpense.FieldAddedTime).
//		Scan(ctx, &v)
//
func (deq *DentalExpenseQuery) Select(field string, fields ...string) *DentalExpenseSelect {
	selector := &DentalExpenseSelect{config: deq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := deq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return deq.sqlQuery(), nil
	}
	return selector
}

func (deq *DentalExpenseQuery) prepareQuery(ctx context.Context) error {
	if deq.path != nil {
		prev, err := deq.path(ctx)
		if err != nil {
			return err
		}
		deq.sql = prev
	}
	return nil
}

func (deq *DentalExpenseQuery) sqlAll(ctx context.Context) ([]*DentalExpense, error) {
	var (
		nodes       = []*DentalExpense{}
		withFKs     = deq.withFKs
		_spec       = deq.querySpec()
		loadedTypes = [3]bool{
			deq.withNurse != nil,
			deq.withMedicalfile != nil,
			deq.withPricetype != nil,
		}
	)
	if deq.withNurse != nil || deq.withMedicalfile != nil || deq.withPricetype != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, dentalexpense.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &DentalExpense{config: deq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, deq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := deq.withNurse; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DentalExpense)
		for i := range nodes {
			if fk := nodes[i].nurse_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(nurse.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "nurse_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Nurse = n
			}
		}
	}

	if query := deq.withMedicalfile; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DentalExpense)
		for i := range nodes {
			if fk := nodes[i].medicalfile_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(medicalfile.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "medicalfile_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Medicalfile = n
			}
		}
	}

	if query := deq.withPricetype; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*DentalExpense)
		for i := range nodes {
			if fk := nodes[i].pricetype_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(pricetype.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "pricetype_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Pricetype = n
			}
		}
	}

	return nodes, nil
}

func (deq *DentalExpenseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := deq.querySpec()
	return sqlgraph.CountNodes(ctx, deq.driver, _spec)
}

func (deq *DentalExpenseQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := deq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (deq *DentalExpenseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentalexpense.Table,
			Columns: dentalexpense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentalexpense.FieldID,
			},
		},
		From:   deq.sql,
		Unique: true,
	}
	if ps := deq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := deq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := deq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := deq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (deq *DentalExpenseQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(deq.driver.Dialect())
	t1 := builder.Table(dentalexpense.Table)
	selector := builder.Select(t1.Columns(dentalexpense.Columns...)...).From(t1)
	if deq.sql != nil {
		selector = deq.sql
		selector.Select(selector.Columns(dentalexpense.Columns...)...)
	}
	for _, p := range deq.predicates {
		p(selector)
	}
	for _, p := range deq.order {
		p(selector)
	}
	if offset := deq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := deq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DentalExpenseGroupBy is the builder for group-by DentalExpense entities.
type DentalExpenseGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (degb *DentalExpenseGroupBy) Aggregate(fns ...AggregateFunc) *DentalExpenseGroupBy {
	degb.fns = append(degb.fns, fns...)
	return degb
}

// Scan applies the group-by query and scan the result into the given value.
func (degb *DentalExpenseGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := degb.path(ctx)
	if err != nil {
		return err
	}
	degb.sql = query
	return degb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := degb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (degb *DentalExpenseGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(degb.fields) > 1 {
		return nil, errors.New("ent: DentalExpenseGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := degb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) StringsX(ctx context.Context) []string {
	v, err := degb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (degb *DentalExpenseGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = degb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = fmt.Errorf("ent: DentalExpenseGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) StringX(ctx context.Context) string {
	v, err := degb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (degb *DentalExpenseGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(degb.fields) > 1 {
		return nil, errors.New("ent: DentalExpenseGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := degb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) IntsX(ctx context.Context) []int {
	v, err := degb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (degb *DentalExpenseGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = degb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = fmt.Errorf("ent: DentalExpenseGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) IntX(ctx context.Context) int {
	v, err := degb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (degb *DentalExpenseGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(degb.fields) > 1 {
		return nil, errors.New("ent: DentalExpenseGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := degb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := degb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (degb *DentalExpenseGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = degb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = fmt.Errorf("ent: DentalExpenseGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) Float64X(ctx context.Context) float64 {
	v, err := degb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (degb *DentalExpenseGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(degb.fields) > 1 {
		return nil, errors.New("ent: DentalExpenseGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := degb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := degb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (degb *DentalExpenseGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = degb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = fmt.Errorf("ent: DentalExpenseGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (degb *DentalExpenseGroupBy) BoolX(ctx context.Context) bool {
	v, err := degb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (degb *DentalExpenseGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := degb.sqlQuery().Query()
	if err := degb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (degb *DentalExpenseGroupBy) sqlQuery() *sql.Selector {
	selector := degb.sql
	columns := make([]string, 0, len(degb.fields)+len(degb.fns))
	columns = append(columns, degb.fields...)
	for _, fn := range degb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(degb.fields...)
}

// DentalExpenseSelect is the builder for select fields of DentalExpense entities.
type DentalExpenseSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (des *DentalExpenseSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := des.path(ctx)
	if err != nil {
		return err
	}
	des.sql = query
	return des.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (des *DentalExpenseSelect) ScanX(ctx context.Context, v interface{}) {
	if err := des.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (des *DentalExpenseSelect) Strings(ctx context.Context) ([]string, error) {
	if len(des.fields) > 1 {
		return nil, errors.New("ent: DentalExpenseSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := des.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (des *DentalExpenseSelect) StringsX(ctx context.Context) []string {
	v, err := des.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (des *DentalExpenseSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = des.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = fmt.Errorf("ent: DentalExpenseSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (des *DentalExpenseSelect) StringX(ctx context.Context) string {
	v, err := des.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (des *DentalExpenseSelect) Ints(ctx context.Context) ([]int, error) {
	if len(des.fields) > 1 {
		return nil, errors.New("ent: DentalExpenseSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := des.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (des *DentalExpenseSelect) IntsX(ctx context.Context) []int {
	v, err := des.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (des *DentalExpenseSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = des.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = fmt.Errorf("ent: DentalExpenseSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (des *DentalExpenseSelect) IntX(ctx context.Context) int {
	v, err := des.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (des *DentalExpenseSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(des.fields) > 1 {
		return nil, errors.New("ent: DentalExpenseSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := des.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (des *DentalExpenseSelect) Float64sX(ctx context.Context) []float64 {
	v, err := des.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (des *DentalExpenseSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = des.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = fmt.Errorf("ent: DentalExpenseSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (des *DentalExpenseSelect) Float64X(ctx context.Context) float64 {
	v, err := des.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (des *DentalExpenseSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(des.fields) > 1 {
		return nil, errors.New("ent: DentalExpenseSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := des.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (des *DentalExpenseSelect) BoolsX(ctx context.Context) []bool {
	v, err := des.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (des *DentalExpenseSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = des.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dentalexpense.Label}
	default:
		err = fmt.Errorf("ent: DentalExpenseSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (des *DentalExpenseSelect) BoolX(ctx context.Context) bool {
	v, err := des.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (des *DentalExpenseSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := des.sqlQuery().Query()
	if err := des.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (des *DentalExpenseSelect) sqlQuery() sql.Querier {
	selector := des.sql
	selector.Select(selector.Columns(des.fields...)...)
	return selector
}
