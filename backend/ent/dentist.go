// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team03/app/ent/degree"
	"github.com/team03/app/ent/dentist"
	"github.com/team03/app/ent/expert"
	"github.com/team03/app/ent/gender"
	"github.com/team03/app/ent/nurse"
)

// Dentist is the model entity for the Dentist schema.
type Dentist struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Cardid holds the value of the "cardid" field.
	Cardid string `json:"cardid,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday,omitempty"`
	// Experience holds the value of the "experience" field.
	Experience string `json:"experience,omitempty"`
	// Tel holds the value of the "tel" field.
	Tel string `json:"tel,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DentistQuery when eager-loading is set.
	Edges     DentistEdges `json:"edges"`
	degree_id *int
	expert_id *int
	gender_id *int
	nurse_id  *int
}

// DentistEdges holds the relations/edges for other nodes in the graph.
type DentistEdges struct {
	// Nurse holds the value of the nurse edge.
	Nurse *Nurse
	// Degree holds the value of the degree edge.
	Degree *Degree
	// Expert holds the value of the expert edge.
	Expert *Expert
	// Gender holds the value of the gender edge.
	Gender *Gender
	// Medicalfiles holds the value of the medicalfiles edge.
	Medicalfiles []*Medicalfile
	// Queue holds the value of the queue edge.
	Queue []*Queue
	// Appointment holds the value of the appointment edge.
	Appointment []*Appointment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// NurseOrErr returns the Nurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentistEdges) NurseOrErr() (*Nurse, error) {
	if e.loadedTypes[0] {
		if e.Nurse == nil {
			// The edge nurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.Nurse, nil
	}
	return nil, &NotLoadedError{edge: "nurse"}
}

// DegreeOrErr returns the Degree value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentistEdges) DegreeOrErr() (*Degree, error) {
	if e.loadedTypes[1] {
		if e.Degree == nil {
			// The edge degree was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: degree.Label}
		}
		return e.Degree, nil
	}
	return nil, &NotLoadedError{edge: "degree"}
}

// ExpertOrErr returns the Expert value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentistEdges) ExpertOrErr() (*Expert, error) {
	if e.loadedTypes[2] {
		if e.Expert == nil {
			// The edge expert was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: expert.Label}
		}
		return e.Expert, nil
	}
	return nil, &NotLoadedError{edge: "expert"}
}

// GenderOrErr returns the Gender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentistEdges) GenderOrErr() (*Gender, error) {
	if e.loadedTypes[3] {
		if e.Gender == nil {
			// The edge gender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: gender.Label}
		}
		return e.Gender, nil
	}
	return nil, &NotLoadedError{edge: "gender"}
}

// MedicalfilesOrErr returns the Medicalfiles value or an error if the edge
// was not loaded in eager-loading.
func (e DentistEdges) MedicalfilesOrErr() ([]*Medicalfile, error) {
	if e.loadedTypes[4] {
		return e.Medicalfiles, nil
	}
	return nil, &NotLoadedError{edge: "medicalfiles"}
}

// QueueOrErr returns the Queue value or an error if the edge
// was not loaded in eager-loading.
func (e DentistEdges) QueueOrErr() ([]*Queue, error) {
	if e.loadedTypes[5] {
		return e.Queue, nil
	}
	return nil, &NotLoadedError{edge: "queue"}
}

// AppointmentOrErr returns the Appointment value or an error if the edge
// was not loaded in eager-loading.
func (e DentistEdges) AppointmentOrErr() ([]*Appointment, error) {
	if e.loadedTypes[6] {
		return e.Appointment, nil
	}
	return nil, &NotLoadedError{edge: "appointment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dentist) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullInt64{},  // age
		&sql.NullString{}, // cardid
		&sql.NullTime{},   // birthday
		&sql.NullString{}, // experience
		&sql.NullString{}, // tel
		&sql.NullString{}, // email
		&sql.NullString{}, // password
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Dentist) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // degree_id
		&sql.NullInt64{}, // expert_id
		&sql.NullInt64{}, // gender_id
		&sql.NullInt64{}, // nurse_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dentist fields.
func (d *Dentist) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dentist.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		d.Name = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[1])
	} else if value.Valid {
		d.Age = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cardid", values[2])
	} else if value.Valid {
		d.Cardid = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field birthday", values[3])
	} else if value.Valid {
		d.Birthday = value.Time
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field experience", values[4])
	} else if value.Valid {
		d.Experience = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tel", values[5])
	} else if value.Valid {
		d.Tel = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[6])
	} else if value.Valid {
		d.Email = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[7])
	} else if value.Valid {
		d.Password = value.String
	}
	values = values[8:]
	if len(values) == len(dentist.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field degree_id", value)
		} else if value.Valid {
			d.degree_id = new(int)
			*d.degree_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field expert_id", value)
		} else if value.Valid {
			d.expert_id = new(int)
			*d.expert_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field gender_id", value)
		} else if value.Valid {
			d.gender_id = new(int)
			*d.gender_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field nurse_id", value)
		} else if value.Valid {
			d.nurse_id = new(int)
			*d.nurse_id = int(value.Int64)
		}
	}
	return nil
}

// QueryNurse queries the nurse edge of the Dentist.
func (d *Dentist) QueryNurse() *NurseQuery {
	return (&DentistClient{config: d.config}).QueryNurse(d)
}

// QueryDegree queries the degree edge of the Dentist.
func (d *Dentist) QueryDegree() *DegreeQuery {
	return (&DentistClient{config: d.config}).QueryDegree(d)
}

// QueryExpert queries the expert edge of the Dentist.
func (d *Dentist) QueryExpert() *ExpertQuery {
	return (&DentistClient{config: d.config}).QueryExpert(d)
}

// QueryGender queries the gender edge of the Dentist.
func (d *Dentist) QueryGender() *GenderQuery {
	return (&DentistClient{config: d.config}).QueryGender(d)
}

// QueryMedicalfiles queries the medicalfiles edge of the Dentist.
func (d *Dentist) QueryMedicalfiles() *MedicalfileQuery {
	return (&DentistClient{config: d.config}).QueryMedicalfiles(d)
}

// QueryQueue queries the queue edge of the Dentist.
func (d *Dentist) QueryQueue() *QueueQuery {
	return (&DentistClient{config: d.config}).QueryQueue(d)
}

// QueryAppointment queries the appointment edge of the Dentist.
func (d *Dentist) QueryAppointment() *AppointmentQuery {
	return (&DentistClient{config: d.config}).QueryAppointment(d)
}

// Update returns a builder for updating this Dentist.
// Note that, you need to call Dentist.Unwrap() before calling this method, if this Dentist
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dentist) Update() *DentistUpdateOne {
	return (&DentistClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Dentist) Unwrap() *Dentist {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dentist is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dentist) String() string {
	var builder strings.Builder
	builder.WriteString("Dentist(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", d.Age))
	builder.WriteString(", cardid=")
	builder.WriteString(d.Cardid)
	builder.WriteString(", birthday=")
	builder.WriteString(d.Birthday.Format(time.ANSIC))
	builder.WriteString(", experience=")
	builder.WriteString(d.Experience)
	builder.WriteString(", tel=")
	builder.WriteString(d.Tel)
	builder.WriteString(", email=")
	builder.WriteString(d.Email)
	builder.WriteString(", password=")
	builder.WriteString(d.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Dentists is a parsable slice of Dentist.
type Dentists []*Dentist

func (d Dentists) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
