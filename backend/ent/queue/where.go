// Code generated by entc, DO NOT EDIT.

package queue

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team03/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Dental applies equality check predicate on the "dental" field. It's identical to DentalEQ.
func Dental(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDental), v))
	})
}

// QueueTime applies equality check predicate on the "queue_time" field. It's identical to QueueTimeEQ.
func QueueTime(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQueueTime), v))
	})
}

// DentalEQ applies the EQ predicate on the "dental" field.
func DentalEQ(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDental), v))
	})
}

// DentalNEQ applies the NEQ predicate on the "dental" field.
func DentalNEQ(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDental), v))
	})
}

// DentalIn applies the In predicate on the "dental" field.
func DentalIn(vs ...string) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDental), v...))
	})
}

// DentalNotIn applies the NotIn predicate on the "dental" field.
func DentalNotIn(vs ...string) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDental), v...))
	})
}

// DentalGT applies the GT predicate on the "dental" field.
func DentalGT(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDental), v))
	})
}

// DentalGTE applies the GTE predicate on the "dental" field.
func DentalGTE(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDental), v))
	})
}

// DentalLT applies the LT predicate on the "dental" field.
func DentalLT(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDental), v))
	})
}

// DentalLTE applies the LTE predicate on the "dental" field.
func DentalLTE(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDental), v))
	})
}

// DentalContains applies the Contains predicate on the "dental" field.
func DentalContains(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDental), v))
	})
}

// DentalHasPrefix applies the HasPrefix predicate on the "dental" field.
func DentalHasPrefix(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDental), v))
	})
}

// DentalHasSuffix applies the HasSuffix predicate on the "dental" field.
func DentalHasSuffix(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDental), v))
	})
}

// DentalEqualFold applies the EqualFold predicate on the "dental" field.
func DentalEqualFold(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDental), v))
	})
}

// DentalContainsFold applies the ContainsFold predicate on the "dental" field.
func DentalContainsFold(v string) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDental), v))
	})
}

// QueueTimeEQ applies the EQ predicate on the "queue_time" field.
func QueueTimeEQ(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQueueTime), v))
	})
}

// QueueTimeNEQ applies the NEQ predicate on the "queue_time" field.
func QueueTimeNEQ(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQueueTime), v))
	})
}

// QueueTimeIn applies the In predicate on the "queue_time" field.
func QueueTimeIn(vs ...time.Time) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQueueTime), v...))
	})
}

// QueueTimeNotIn applies the NotIn predicate on the "queue_time" field.
func QueueTimeNotIn(vs ...time.Time) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQueueTime), v...))
	})
}

// QueueTimeGT applies the GT predicate on the "queue_time" field.
func QueueTimeGT(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQueueTime), v))
	})
}

// QueueTimeGTE applies the GTE predicate on the "queue_time" field.
func QueueTimeGTE(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQueueTime), v))
	})
}

// QueueTimeLT applies the LT predicate on the "queue_time" field.
func QueueTimeLT(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQueueTime), v))
	})
}

// QueueTimeLTE applies the LTE predicate on the "queue_time" field.
func QueueTimeLTE(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQueueTime), v))
	})
}

// HasDentist applies the HasEdge predicate on the "dentist" edge.
func HasDentist() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentistTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DentistTable, DentistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDentistWith applies the HasEdge predicate on the "dentist" edge with a given conditions (other predicates).
func HasDentistWith(preds ...predicate.Dentist) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentistInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DentistTable, DentistColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNurse applies the HasEdge predicate on the "nurse" edge.
func HasNurse() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNurseWith applies the HasEdge predicate on the "nurse" edge with a given conditions (other predicates).
func HasNurseWith(preds ...predicate.Nurse) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		p(s.Not())
	})
}
