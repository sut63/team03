// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team03/app/ent/dentist"
	"github.com/team03/app/ent/expert"
)

// ExpertCreate is the builder for creating a Expert entity.
type ExpertCreate struct {
	config
	mutation *ExpertMutation
	hooks    []Hook
}

// SetName sets the name field.
func (ec *ExpertCreate) SetName(s string) *ExpertCreate {
	ec.mutation.SetName(s)
	return ec
}

// AddDentistIDs adds the dentists edge to Dentist by ids.
func (ec *ExpertCreate) AddDentistIDs(ids ...int) *ExpertCreate {
	ec.mutation.AddDentistIDs(ids...)
	return ec
}

// AddDentists adds the dentists edges to Dentist.
func (ec *ExpertCreate) AddDentists(d ...*Dentist) *ExpertCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddDentistIDs(ids...)
}

// Mutation returns the ExpertMutation object of the builder.
func (ec *ExpertCreate) Mutation() *ExpertMutation {
	return ec.mutation
}

// Save creates the Expert in the database.
func (ec *ExpertCreate) Save(ctx context.Context) (*Expert, error) {
	if _, ok := ec.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := expert.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	var (
		err  error
		node *Expert
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExpertMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExpertCreate) SaveX(ctx context.Context) *Expert {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *ExpertCreate) sqlSave(ctx context.Context) (*Expert, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	e.ID = int(id)
	return e, nil
}

func (ec *ExpertCreate) createSpec() (*Expert, *sqlgraph.CreateSpec) {
	var (
		e     = &Expert{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: expert.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: expert.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expert.FieldName,
		})
		e.Name = value
	}
	if nodes := ec.mutation.DentistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expert.DentistsTable,
			Columns: []string{expert.DentistsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dentist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}
