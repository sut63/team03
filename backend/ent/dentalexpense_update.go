// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/dentalexpense"
	"github.com/tanapon395/playlist-video/ent/medicalfile"
	"github.com/tanapon395/playlist-video/ent/nurse"
	"github.com/tanapon395/playlist-video/ent/predicate"
	"github.com/tanapon395/playlist-video/ent/pricetype"
)

// DentalExpenseUpdate is the builder for updating DentalExpense entities.
type DentalExpenseUpdate struct {
	config
	hooks      []Hook
	mutation   *DentalExpenseMutation
	predicates []predicate.DentalExpense
}

// Where adds a new predicate for the builder.
func (deu *DentalExpenseUpdate) Where(ps ...predicate.DentalExpense) *DentalExpenseUpdate {
	deu.predicates = append(deu.predicates, ps...)
	return deu
}

// SetAddedTime sets the added_time field.
func (deu *DentalExpenseUpdate) SetAddedTime(t time.Time) *DentalExpenseUpdate {
	deu.mutation.SetAddedTime(t)
	return deu
}

// SetNurseID sets the nurse edge to Nurse by id.
func (deu *DentalExpenseUpdate) SetNurseID(id int) *DentalExpenseUpdate {
	deu.mutation.SetNurseID(id)
	return deu
}

// SetNillableNurseID sets the nurse edge to Nurse by id if the given value is not nil.
func (deu *DentalExpenseUpdate) SetNillableNurseID(id *int) *DentalExpenseUpdate {
	if id != nil {
		deu = deu.SetNurseID(*id)
	}
	return deu
}

// SetNurse sets the nurse edge to Nurse.
func (deu *DentalExpenseUpdate) SetNurse(n *Nurse) *DentalExpenseUpdate {
	return deu.SetNurseID(n.ID)
}

// SetMedicalfileID sets the medicalfile edge to Medicalfile by id.
func (deu *DentalExpenseUpdate) SetMedicalfileID(id int) *DentalExpenseUpdate {
	deu.mutation.SetMedicalfileID(id)
	return deu
}

// SetNillableMedicalfileID sets the medicalfile edge to Medicalfile by id if the given value is not nil.
func (deu *DentalExpenseUpdate) SetNillableMedicalfileID(id *int) *DentalExpenseUpdate {
	if id != nil {
		deu = deu.SetMedicalfileID(*id)
	}
	return deu
}

// SetMedicalfile sets the medicalfile edge to Medicalfile.
func (deu *DentalExpenseUpdate) SetMedicalfile(m *Medicalfile) *DentalExpenseUpdate {
	return deu.SetMedicalfileID(m.ID)
}

// SetPricetypeID sets the pricetype edge to PriceType by id.
func (deu *DentalExpenseUpdate) SetPricetypeID(id int) *DentalExpenseUpdate {
	deu.mutation.SetPricetypeID(id)
	return deu
}

// SetNillablePricetypeID sets the pricetype edge to PriceType by id if the given value is not nil.
func (deu *DentalExpenseUpdate) SetNillablePricetypeID(id *int) *DentalExpenseUpdate {
	if id != nil {
		deu = deu.SetPricetypeID(*id)
	}
	return deu
}

// SetPricetype sets the pricetype edge to PriceType.
func (deu *DentalExpenseUpdate) SetPricetype(p *PriceType) *DentalExpenseUpdate {
	return deu.SetPricetypeID(p.ID)
}

// Mutation returns the DentalExpenseMutation object of the builder.
func (deu *DentalExpenseUpdate) Mutation() *DentalExpenseMutation {
	return deu.mutation
}

// ClearNurse clears the nurse edge to Nurse.
func (deu *DentalExpenseUpdate) ClearNurse() *DentalExpenseUpdate {
	deu.mutation.ClearNurse()
	return deu
}

// ClearMedicalfile clears the medicalfile edge to Medicalfile.
func (deu *DentalExpenseUpdate) ClearMedicalfile() *DentalExpenseUpdate {
	deu.mutation.ClearMedicalfile()
	return deu
}

// ClearPricetype clears the pricetype edge to PriceType.
func (deu *DentalExpenseUpdate) ClearPricetype() *DentalExpenseUpdate {
	deu.mutation.ClearPricetype()
	return deu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (deu *DentalExpenseUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(deu.hooks) == 0 {
		affected, err = deu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentalExpenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			deu.mutation = mutation
			affected, err = deu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(deu.hooks) - 1; i >= 0; i-- {
			mut = deu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, deu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (deu *DentalExpenseUpdate) SaveX(ctx context.Context) int {
	affected, err := deu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (deu *DentalExpenseUpdate) Exec(ctx context.Context) error {
	_, err := deu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deu *DentalExpenseUpdate) ExecX(ctx context.Context) {
	if err := deu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (deu *DentalExpenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentalexpense.Table,
			Columns: dentalexpense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentalexpense.FieldID,
			},
		},
	}
	if ps := deu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := deu.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dentalexpense.FieldAddedTime,
		})
	}
	if deu.mutation.NurseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.NurseTable,
			Columns: []string{dentalexpense.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.NurseTable,
			Columns: []string{dentalexpense.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deu.mutation.MedicalfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.MedicalfileTable,
			Columns: []string{dentalexpense.MedicalfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.MedicalfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.MedicalfileTable,
			Columns: []string{dentalexpense.MedicalfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deu.mutation.PricetypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.PricetypeTable,
			Columns: []string{dentalexpense.PricetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pricetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deu.mutation.PricetypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.PricetypeTable,
			Columns: []string{dentalexpense.PricetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pricetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, deu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dentalexpense.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DentalExpenseUpdateOne is the builder for updating a single DentalExpense entity.
type DentalExpenseUpdateOne struct {
	config
	hooks    []Hook
	mutation *DentalExpenseMutation
}

// SetAddedTime sets the added_time field.
func (deuo *DentalExpenseUpdateOne) SetAddedTime(t time.Time) *DentalExpenseUpdateOne {
	deuo.mutation.SetAddedTime(t)
	return deuo
}

// SetNurseID sets the nurse edge to Nurse by id.
func (deuo *DentalExpenseUpdateOne) SetNurseID(id int) *DentalExpenseUpdateOne {
	deuo.mutation.SetNurseID(id)
	return deuo
}

// SetNillableNurseID sets the nurse edge to Nurse by id if the given value is not nil.
func (deuo *DentalExpenseUpdateOne) SetNillableNurseID(id *int) *DentalExpenseUpdateOne {
	if id != nil {
		deuo = deuo.SetNurseID(*id)
	}
	return deuo
}

// SetNurse sets the nurse edge to Nurse.
func (deuo *DentalExpenseUpdateOne) SetNurse(n *Nurse) *DentalExpenseUpdateOne {
	return deuo.SetNurseID(n.ID)
}

// SetMedicalfileID sets the medicalfile edge to Medicalfile by id.
func (deuo *DentalExpenseUpdateOne) SetMedicalfileID(id int) *DentalExpenseUpdateOne {
	deuo.mutation.SetMedicalfileID(id)
	return deuo
}

// SetNillableMedicalfileID sets the medicalfile edge to Medicalfile by id if the given value is not nil.
func (deuo *DentalExpenseUpdateOne) SetNillableMedicalfileID(id *int) *DentalExpenseUpdateOne {
	if id != nil {
		deuo = deuo.SetMedicalfileID(*id)
	}
	return deuo
}

// SetMedicalfile sets the medicalfile edge to Medicalfile.
func (deuo *DentalExpenseUpdateOne) SetMedicalfile(m *Medicalfile) *DentalExpenseUpdateOne {
	return deuo.SetMedicalfileID(m.ID)
}

// SetPricetypeID sets the pricetype edge to PriceType by id.
func (deuo *DentalExpenseUpdateOne) SetPricetypeID(id int) *DentalExpenseUpdateOne {
	deuo.mutation.SetPricetypeID(id)
	return deuo
}

// SetNillablePricetypeID sets the pricetype edge to PriceType by id if the given value is not nil.
func (deuo *DentalExpenseUpdateOne) SetNillablePricetypeID(id *int) *DentalExpenseUpdateOne {
	if id != nil {
		deuo = deuo.SetPricetypeID(*id)
	}
	return deuo
}

// SetPricetype sets the pricetype edge to PriceType.
func (deuo *DentalExpenseUpdateOne) SetPricetype(p *PriceType) *DentalExpenseUpdateOne {
	return deuo.SetPricetypeID(p.ID)
}

// Mutation returns the DentalExpenseMutation object of the builder.
func (deuo *DentalExpenseUpdateOne) Mutation() *DentalExpenseMutation {
	return deuo.mutation
}

// ClearNurse clears the nurse edge to Nurse.
func (deuo *DentalExpenseUpdateOne) ClearNurse() *DentalExpenseUpdateOne {
	deuo.mutation.ClearNurse()
	return deuo
}

// ClearMedicalfile clears the medicalfile edge to Medicalfile.
func (deuo *DentalExpenseUpdateOne) ClearMedicalfile() *DentalExpenseUpdateOne {
	deuo.mutation.ClearMedicalfile()
	return deuo
}

// ClearPricetype clears the pricetype edge to PriceType.
func (deuo *DentalExpenseUpdateOne) ClearPricetype() *DentalExpenseUpdateOne {
	deuo.mutation.ClearPricetype()
	return deuo
}

// Save executes the query and returns the updated entity.
func (deuo *DentalExpenseUpdateOne) Save(ctx context.Context) (*DentalExpense, error) {

	var (
		err  error
		node *DentalExpense
	)
	if len(deuo.hooks) == 0 {
		node, err = deuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentalExpenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			deuo.mutation = mutation
			node, err = deuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(deuo.hooks) - 1; i >= 0; i-- {
			mut = deuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, deuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (deuo *DentalExpenseUpdateOne) SaveX(ctx context.Context) *DentalExpense {
	de, err := deuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return de
}

// Exec executes the query on the entity.
func (deuo *DentalExpenseUpdateOne) Exec(ctx context.Context) error {
	_, err := deuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (deuo *DentalExpenseUpdateOne) ExecX(ctx context.Context) {
	if err := deuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (deuo *DentalExpenseUpdateOne) sqlSave(ctx context.Context) (de *DentalExpense, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentalexpense.Table,
			Columns: dentalexpense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentalexpense.FieldID,
			},
		},
	}
	id, ok := deuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DentalExpense.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := deuo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dentalexpense.FieldAddedTime,
		})
	}
	if deuo.mutation.NurseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.NurseTable,
			Columns: []string{dentalexpense.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.NurseTable,
			Columns: []string{dentalexpense.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deuo.mutation.MedicalfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.MedicalfileTable,
			Columns: []string{dentalexpense.MedicalfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.MedicalfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.MedicalfileTable,
			Columns: []string{dentalexpense.MedicalfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if deuo.mutation.PricetypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.PricetypeTable,
			Columns: []string{dentalexpense.PricetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pricetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := deuo.mutation.PricetypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.PricetypeTable,
			Columns: []string{dentalexpense.PricetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pricetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	de = &DentalExpense{config: deuo.config}
	_spec.Assign = de.assignValues
	_spec.ScanValues = de.scanValues()
	if err = sqlgraph.UpdateNode(ctx, deuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dentalexpense.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return de, nil
}
