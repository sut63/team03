// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/team03/app/ent/appointment"
	"github.com/team03/app/ent/degree"
	"github.com/team03/app/ent/dentalexpense"
	"github.com/team03/app/ent/dentist"
	"github.com/team03/app/ent/disease"
	"github.com/team03/app/ent/expert"
	"github.com/team03/app/ent/gender"
	"github.com/team03/app/ent/medicalcare"
	"github.com/team03/app/ent/medicalfile"
	"github.com/team03/app/ent/nurse"
	"github.com/team03/app/ent/patient"
	"github.com/team03/app/ent/pricetype"
	"github.com/team03/app/ent/queue"
	"github.com/team03/app/ent/room"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppointment   = "Appointment"
	TypeDegree        = "Degree"
	TypeDentalExpense = "DentalExpense"
	TypeDentist       = "Dentist"
	TypeDisease       = "Disease"
	TypeExpert        = "Expert"
	TypeGender        = "Gender"
	TypeMedicalCare   = "MedicalCare"
	TypeMedicalfile   = "Medicalfile"
	TypeNurse         = "Nurse"
	TypePatient       = "Patient"
	TypePriceType     = "PriceType"
	TypeQueue         = "Queue"
	TypeRoom          = "Room"
)

// AppointmentMutation represents an operation that mutate the Appointments
// nodes in the graph.
type AppointmentMutation struct {
	config
	op             Op
	typ            string
	id             *int
	detail         *string
	datetime       *time.Time
	clearedFields  map[string]struct{}
	patient        *int
	clearedpatient bool
	room           *int
	clearedroom    bool
	dentist        *int
	cleareddentist bool
	done           bool
	oldValue       func(context.Context) (*Appointment, error)
}

var _ ent.Mutation = (*AppointmentMutation)(nil)

// appointmentOption allows to manage the mutation configuration using functional options.
type appointmentOption func(*AppointmentMutation)

// newAppointmentMutation creates new mutation for $n.Name.
func newAppointmentMutation(c config, op Op, opts ...appointmentOption) *AppointmentMutation {
	m := &AppointmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAppointment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppointmentID sets the id field of the mutation.
func withAppointmentID(id int) appointmentOption {
	return func(m *AppointmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Appointment
		)
		m.oldValue = func(ctx context.Context) (*Appointment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Appointment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppointment sets the old Appointment of the mutation.
func withAppointment(node *Appointment) appointmentOption {
	return func(m *AppointmentMutation) {
		m.oldValue = func(context.Context) (*Appointment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppointmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppointmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AppointmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDetail sets the detail field.
func (m *AppointmentMutation) SetDetail(s string) {
	m.detail = &s
}

// Detail returns the detail value in the mutation.
func (m *AppointmentMutation) Detail() (r string, exists bool) {
	v := m.detail
	if v == nil {
		return
	}
	return *v, true
}

// OldDetail returns the old detail value of the Appointment.
// If the Appointment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AppointmentMutation) OldDetail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetail: %w", err)
	}
	return oldValue.Detail, nil
}

// ResetDetail reset all changes of the "detail" field.
func (m *AppointmentMutation) ResetDetail() {
	m.detail = nil
}

// SetDatetime sets the datetime field.
func (m *AppointmentMutation) SetDatetime(t time.Time) {
	m.datetime = &t
}

// Datetime returns the datetime value in the mutation.
func (m *AppointmentMutation) Datetime() (r time.Time, exists bool) {
	v := m.datetime
	if v == nil {
		return
	}
	return *v, true
}

// OldDatetime returns the old datetime value of the Appointment.
// If the Appointment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AppointmentMutation) OldDatetime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDatetime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDatetime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatetime: %w", err)
	}
	return oldValue.Datetime, nil
}

// ResetDatetime reset all changes of the "datetime" field.
func (m *AppointmentMutation) ResetDatetime() {
	m.datetime = nil
}

// SetPatientID sets the patient edge to Patient by id.
func (m *AppointmentMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *AppointmentMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *AppointmentMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *AppointmentMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *AppointmentMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *AppointmentMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetRoomID sets the room edge to Room by id.
func (m *AppointmentMutation) SetRoomID(id int) {
	m.room = &id
}

// ClearRoom clears the room edge to Room.
func (m *AppointmentMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared returns if the edge room was cleared.
func (m *AppointmentMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the room id in the mutation.
func (m *AppointmentMutation) RoomID() (id int, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the room ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *AppointmentMutation) RoomIDs() (ids []int) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *AppointmentMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// SetDentistID sets the dentist edge to Dentist by id.
func (m *AppointmentMutation) SetDentistID(id int) {
	m.dentist = &id
}

// ClearDentist clears the dentist edge to Dentist.
func (m *AppointmentMutation) ClearDentist() {
	m.cleareddentist = true
}

// DentistCleared returns if the edge dentist was cleared.
func (m *AppointmentMutation) DentistCleared() bool {
	return m.cleareddentist
}

// DentistID returns the dentist id in the mutation.
func (m *AppointmentMutation) DentistID() (id int, exists bool) {
	if m.dentist != nil {
		return *m.dentist, true
	}
	return
}

// DentistIDs returns the dentist ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DentistID instead. It exists only for internal usage by the builders.
func (m *AppointmentMutation) DentistIDs() (ids []int) {
	if id := m.dentist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDentist reset all changes of the "dentist" edge.
func (m *AppointmentMutation) ResetDentist() {
	m.dentist = nil
	m.cleareddentist = false
}

// Op returns the operation name.
func (m *AppointmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Appointment).
func (m *AppointmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AppointmentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.detail != nil {
		fields = append(fields, appointment.FieldDetail)
	}
	if m.datetime != nil {
		fields = append(fields, appointment.FieldDatetime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AppointmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appointment.FieldDetail:
		return m.Detail()
	case appointment.FieldDatetime:
		return m.Datetime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AppointmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appointment.FieldDetail:
		return m.OldDetail(ctx)
	case appointment.FieldDatetime:
		return m.OldDatetime(ctx)
	}
	return nil, fmt.Errorf("unknown Appointment field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AppointmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appointment.FieldDetail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetail(v)
		return nil
	case appointment.FieldDatetime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatetime(v)
		return nil
	}
	return fmt.Errorf("unknown Appointment field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AppointmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AppointmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AppointmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Appointment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AppointmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AppointmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppointmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Appointment nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AppointmentMutation) ResetField(name string) error {
	switch name {
	case appointment.FieldDetail:
		m.ResetDetail()
		return nil
	case appointment.FieldDatetime:
		m.ResetDatetime()
		return nil
	}
	return fmt.Errorf("unknown Appointment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AppointmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.patient != nil {
		edges = append(edges, appointment.EdgePatient)
	}
	if m.room != nil {
		edges = append(edges, appointment.EdgeRoom)
	}
	if m.dentist != nil {
		edges = append(edges, appointment.EdgeDentist)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AppointmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case appointment.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case appointment.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	case appointment.EdgeDentist:
		if id := m.dentist; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AppointmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AppointmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AppointmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedpatient {
		edges = append(edges, appointment.EdgePatient)
	}
	if m.clearedroom {
		edges = append(edges, appointment.EdgeRoom)
	}
	if m.cleareddentist {
		edges = append(edges, appointment.EdgeDentist)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AppointmentMutation) EdgeCleared(name string) bool {
	switch name {
	case appointment.EdgePatient:
		return m.clearedpatient
	case appointment.EdgeRoom:
		return m.clearedroom
	case appointment.EdgeDentist:
		return m.cleareddentist
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AppointmentMutation) ClearEdge(name string) error {
	switch name {
	case appointment.EdgePatient:
		m.ClearPatient()
		return nil
	case appointment.EdgeRoom:
		m.ClearRoom()
		return nil
	case appointment.EdgeDentist:
		m.ClearDentist()
		return nil
	}
	return fmt.Errorf("unknown Appointment unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AppointmentMutation) ResetEdge(name string) error {
	switch name {
	case appointment.EdgePatient:
		m.ResetPatient()
		return nil
	case appointment.EdgeRoom:
		m.ResetRoom()
		return nil
	case appointment.EdgeDentist:
		m.ResetDentist()
		return nil
	}
	return fmt.Errorf("unknown Appointment edge %s", name)
}

// DegreeMutation represents an operation that mutate the Degrees
// nodes in the graph.
type DegreeMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	dentists        map[int]struct{}
	removeddentists map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Degree, error)
}

var _ ent.Mutation = (*DegreeMutation)(nil)

// degreeOption allows to manage the mutation configuration using functional options.
type degreeOption func(*DegreeMutation)

// newDegreeMutation creates new mutation for $n.Name.
func newDegreeMutation(c config, op Op, opts ...degreeOption) *DegreeMutation {
	m := &DegreeMutation{
		config:        c,
		op:            op,
		typ:           TypeDegree,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDegreeID sets the id field of the mutation.
func withDegreeID(id int) degreeOption {
	return func(m *DegreeMutation) {
		var (
			err   error
			once  sync.Once
			value *Degree
		)
		m.oldValue = func(ctx context.Context) (*Degree, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Degree.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDegree sets the old Degree of the mutation.
func withDegree(node *Degree) degreeOption {
	return func(m *DegreeMutation) {
		m.oldValue = func(context.Context) (*Degree, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DegreeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DegreeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DegreeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DegreeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DegreeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Degree.
// If the Degree object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DegreeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DegreeMutation) ResetName() {
	m.name = nil
}

// AddDentistIDs adds the dentists edge to Dentist by ids.
func (m *DegreeMutation) AddDentistIDs(ids ...int) {
	if m.dentists == nil {
		m.dentists = make(map[int]struct{})
	}
	for i := range ids {
		m.dentists[ids[i]] = struct{}{}
	}
}

// RemoveDentistIDs removes the dentists edge to Dentist by ids.
func (m *DegreeMutation) RemoveDentistIDs(ids ...int) {
	if m.removeddentists == nil {
		m.removeddentists = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddentists[ids[i]] = struct{}{}
	}
}

// RemovedDentists returns the removed ids of dentists.
func (m *DegreeMutation) RemovedDentistsIDs() (ids []int) {
	for id := range m.removeddentists {
		ids = append(ids, id)
	}
	return
}

// DentistsIDs returns the dentists ids in the mutation.
func (m *DegreeMutation) DentistsIDs() (ids []int) {
	for id := range m.dentists {
		ids = append(ids, id)
	}
	return
}

// ResetDentists reset all changes of the "dentists" edge.
func (m *DegreeMutation) ResetDentists() {
	m.dentists = nil
	m.removeddentists = nil
}

// Op returns the operation name.
func (m *DegreeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Degree).
func (m *DegreeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DegreeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, degree.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DegreeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case degree.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DegreeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case degree.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Degree field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DegreeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case degree.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Degree field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DegreeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DegreeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DegreeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Degree numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DegreeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DegreeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DegreeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Degree nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DegreeMutation) ResetField(name string) error {
	switch name {
	case degree.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Degree field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DegreeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dentists != nil {
		edges = append(edges, degree.EdgeDentists)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DegreeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case degree.EdgeDentists:
		ids := make([]ent.Value, 0, len(m.dentists))
		for id := range m.dentists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DegreeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddentists != nil {
		edges = append(edges, degree.EdgeDentists)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DegreeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case degree.EdgeDentists:
		ids := make([]ent.Value, 0, len(m.removeddentists))
		for id := range m.removeddentists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DegreeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DegreeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DegreeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Degree unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DegreeMutation) ResetEdge(name string) error {
	switch name {
	case degree.EdgeDentists:
		m.ResetDentists()
		return nil
	}
	return fmt.Errorf("unknown Degree edge %s", name)
}

// DentalExpenseMutation represents an operation that mutate the DentalExpenses
// nodes in the graph.
type DentalExpenseMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	added_time         *time.Time
	clearedFields      map[string]struct{}
	nurse              *int
	clearednurse       bool
	medicalfile        *int
	clearedmedicalfile bool
	pricetype          *int
	clearedpricetype   bool
	done               bool
	oldValue           func(context.Context) (*DentalExpense, error)
}

var _ ent.Mutation = (*DentalExpenseMutation)(nil)

// dentalexpenseOption allows to manage the mutation configuration using functional options.
type dentalexpenseOption func(*DentalExpenseMutation)

// newDentalExpenseMutation creates new mutation for $n.Name.
func newDentalExpenseMutation(c config, op Op, opts ...dentalexpenseOption) *DentalExpenseMutation {
	m := &DentalExpenseMutation{
		config:        c,
		op:            op,
		typ:           TypeDentalExpense,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDentalExpenseID sets the id field of the mutation.
func withDentalExpenseID(id int) dentalexpenseOption {
	return func(m *DentalExpenseMutation) {
		var (
			err   error
			once  sync.Once
			value *DentalExpense
		)
		m.oldValue = func(ctx context.Context) (*DentalExpense, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DentalExpense.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDentalExpense sets the old DentalExpense of the mutation.
func withDentalExpense(node *DentalExpense) dentalexpenseOption {
	return func(m *DentalExpenseMutation) {
		m.oldValue = func(context.Context) (*DentalExpense, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DentalExpenseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DentalExpenseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DentalExpenseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAddedTime sets the added_time field.
func (m *DentalExpenseMutation) SetAddedTime(t time.Time) {
	m.added_time = &t
}

// AddedTime returns the added_time value in the mutation.
func (m *DentalExpenseMutation) AddedTime() (r time.Time, exists bool) {
	v := m.added_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old added_time value of the DentalExpense.
// If the DentalExpense object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentalExpenseMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime reset all changes of the "added_time" field.
func (m *DentalExpenseMutation) ResetAddedTime() {
	m.added_time = nil
}

// SetNurseID sets the nurse edge to Nurse by id.
func (m *DentalExpenseMutation) SetNurseID(id int) {
	m.nurse = &id
}

// ClearNurse clears the nurse edge to Nurse.
func (m *DentalExpenseMutation) ClearNurse() {
	m.clearednurse = true
}

// NurseCleared returns if the edge nurse was cleared.
func (m *DentalExpenseMutation) NurseCleared() bool {
	return m.clearednurse
}

// NurseID returns the nurse id in the mutation.
func (m *DentalExpenseMutation) NurseID() (id int, exists bool) {
	if m.nurse != nil {
		return *m.nurse, true
	}
	return
}

// NurseIDs returns the nurse ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NurseID instead. It exists only for internal usage by the builders.
func (m *DentalExpenseMutation) NurseIDs() (ids []int) {
	if id := m.nurse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNurse reset all changes of the "nurse" edge.
func (m *DentalExpenseMutation) ResetNurse() {
	m.nurse = nil
	m.clearednurse = false
}

// SetMedicalfileID sets the medicalfile edge to Medicalfile by id.
func (m *DentalExpenseMutation) SetMedicalfileID(id int) {
	m.medicalfile = &id
}

// ClearMedicalfile clears the medicalfile edge to Medicalfile.
func (m *DentalExpenseMutation) ClearMedicalfile() {
	m.clearedmedicalfile = true
}

// MedicalfileCleared returns if the edge medicalfile was cleared.
func (m *DentalExpenseMutation) MedicalfileCleared() bool {
	return m.clearedmedicalfile
}

// MedicalfileID returns the medicalfile id in the mutation.
func (m *DentalExpenseMutation) MedicalfileID() (id int, exists bool) {
	if m.medicalfile != nil {
		return *m.medicalfile, true
	}
	return
}

// MedicalfileIDs returns the medicalfile ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MedicalfileID instead. It exists only for internal usage by the builders.
func (m *DentalExpenseMutation) MedicalfileIDs() (ids []int) {
	if id := m.medicalfile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedicalfile reset all changes of the "medicalfile" edge.
func (m *DentalExpenseMutation) ResetMedicalfile() {
	m.medicalfile = nil
	m.clearedmedicalfile = false
}

// SetPricetypeID sets the pricetype edge to PriceType by id.
func (m *DentalExpenseMutation) SetPricetypeID(id int) {
	m.pricetype = &id
}

// ClearPricetype clears the pricetype edge to PriceType.
func (m *DentalExpenseMutation) ClearPricetype() {
	m.clearedpricetype = true
}

// PricetypeCleared returns if the edge pricetype was cleared.
func (m *DentalExpenseMutation) PricetypeCleared() bool {
	return m.clearedpricetype
}

// PricetypeID returns the pricetype id in the mutation.
func (m *DentalExpenseMutation) PricetypeID() (id int, exists bool) {
	if m.pricetype != nil {
		return *m.pricetype, true
	}
	return
}

// PricetypeIDs returns the pricetype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PricetypeID instead. It exists only for internal usage by the builders.
func (m *DentalExpenseMutation) PricetypeIDs() (ids []int) {
	if id := m.pricetype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPricetype reset all changes of the "pricetype" edge.
func (m *DentalExpenseMutation) ResetPricetype() {
	m.pricetype = nil
	m.clearedpricetype = false
}

// Op returns the operation name.
func (m *DentalExpenseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DentalExpense).
func (m *DentalExpenseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DentalExpenseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.added_time != nil {
		fields = append(fields, dentalexpense.FieldAddedTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DentalExpenseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dentalexpense.FieldAddedTime:
		return m.AddedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DentalExpenseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dentalexpense.FieldAddedTime:
		return m.OldAddedTime(ctx)
	}
	return nil, fmt.Errorf("unknown DentalExpense field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DentalExpenseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dentalexpense.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	}
	return fmt.Errorf("unknown DentalExpense field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DentalExpenseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DentalExpenseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DentalExpenseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DentalExpense numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DentalExpenseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DentalExpenseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DentalExpenseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DentalExpense nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DentalExpenseMutation) ResetField(name string) error {
	switch name {
	case dentalexpense.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	}
	return fmt.Errorf("unknown DentalExpense field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DentalExpenseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.nurse != nil {
		edges = append(edges, dentalexpense.EdgeNurse)
	}
	if m.medicalfile != nil {
		edges = append(edges, dentalexpense.EdgeMedicalfile)
	}
	if m.pricetype != nil {
		edges = append(edges, dentalexpense.EdgePricetype)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DentalExpenseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dentalexpense.EdgeNurse:
		if id := m.nurse; id != nil {
			return []ent.Value{*id}
		}
	case dentalexpense.EdgeMedicalfile:
		if id := m.medicalfile; id != nil {
			return []ent.Value{*id}
		}
	case dentalexpense.EdgePricetype:
		if id := m.pricetype; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DentalExpenseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DentalExpenseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DentalExpenseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearednurse {
		edges = append(edges, dentalexpense.EdgeNurse)
	}
	if m.clearedmedicalfile {
		edges = append(edges, dentalexpense.EdgeMedicalfile)
	}
	if m.clearedpricetype {
		edges = append(edges, dentalexpense.EdgePricetype)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DentalExpenseMutation) EdgeCleared(name string) bool {
	switch name {
	case dentalexpense.EdgeNurse:
		return m.clearednurse
	case dentalexpense.EdgeMedicalfile:
		return m.clearedmedicalfile
	case dentalexpense.EdgePricetype:
		return m.clearedpricetype
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DentalExpenseMutation) ClearEdge(name string) error {
	switch name {
	case dentalexpense.EdgeNurse:
		m.ClearNurse()
		return nil
	case dentalexpense.EdgeMedicalfile:
		m.ClearMedicalfile()
		return nil
	case dentalexpense.EdgePricetype:
		m.ClearPricetype()
		return nil
	}
	return fmt.Errorf("unknown DentalExpense unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DentalExpenseMutation) ResetEdge(name string) error {
	switch name {
	case dentalexpense.EdgeNurse:
		m.ResetNurse()
		return nil
	case dentalexpense.EdgeMedicalfile:
		m.ResetMedicalfile()
		return nil
	case dentalexpense.EdgePricetype:
		m.ResetPricetype()
		return nil
	}
	return fmt.Errorf("unknown DentalExpense edge %s", name)
}

// DentistMutation represents an operation that mutate the Dentists
// nodes in the graph.
type DentistMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	age                 *int
	addage              *int
	cardid              *string
	birthday            *time.Time
	experience          *string
	tel                 *string
	email               *string
	password            *string
	clearedFields       map[string]struct{}
	nurse               *int
	clearednurse        bool
	degree              *int
	cleareddegree       bool
	expert              *int
	clearedexpert       bool
	gender              *int
	clearedgender       bool
	medicalfiles        map[int]struct{}
	removedmedicalfiles map[int]struct{}
	queue               map[int]struct{}
	removedqueue        map[int]struct{}
	appointment         map[int]struct{}
	removedappointment  map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Dentist, error)
}

var _ ent.Mutation = (*DentistMutation)(nil)

// dentistOption allows to manage the mutation configuration using functional options.
type dentistOption func(*DentistMutation)

// newDentistMutation creates new mutation for $n.Name.
func newDentistMutation(c config, op Op, opts ...dentistOption) *DentistMutation {
	m := &DentistMutation{
		config:        c,
		op:            op,
		typ:           TypeDentist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDentistID sets the id field of the mutation.
func withDentistID(id int) dentistOption {
	return func(m *DentistMutation) {
		var (
			err   error
			once  sync.Once
			value *Dentist
		)
		m.oldValue = func(ctx context.Context) (*Dentist, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dentist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDentist sets the old Dentist of the mutation.
func withDentist(node *Dentist) dentistOption {
	return func(m *DentistMutation) {
		m.oldValue = func(context.Context) (*Dentist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DentistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DentistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DentistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DentistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DentistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DentistMutation) ResetName() {
	m.name = nil
}

// SetAge sets the age field.
func (m *DentistMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *DentistMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *DentistMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *DentistMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *DentistMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetCardid sets the cardid field.
func (m *DentistMutation) SetCardid(s string) {
	m.cardid = &s
}

// Cardid returns the cardid value in the mutation.
func (m *DentistMutation) Cardid() (r string, exists bool) {
	v := m.cardid
	if v == nil {
		return
	}
	return *v, true
}

// OldCardid returns the old cardid value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldCardid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCardid is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCardid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCardid: %w", err)
	}
	return oldValue.Cardid, nil
}

// ResetCardid reset all changes of the "cardid" field.
func (m *DentistMutation) ResetCardid() {
	m.cardid = nil
}

// SetBirthday sets the birthday field.
func (m *DentistMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the birthday value in the mutation.
func (m *DentistMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old birthday value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldBirthday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirthday is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ResetBirthday reset all changes of the "birthday" field.
func (m *DentistMutation) ResetBirthday() {
	m.birthday = nil
}

// SetExperience sets the experience field.
func (m *DentistMutation) SetExperience(s string) {
	m.experience = &s
}

// Experience returns the experience value in the mutation.
func (m *DentistMutation) Experience() (r string, exists bool) {
	v := m.experience
	if v == nil {
		return
	}
	return *v, true
}

// OldExperience returns the old experience value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldExperience(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExperience is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExperience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExperience: %w", err)
	}
	return oldValue.Experience, nil
}

// ResetExperience reset all changes of the "experience" field.
func (m *DentistMutation) ResetExperience() {
	m.experience = nil
}

// SetTel sets the tel field.
func (m *DentistMutation) SetTel(s string) {
	m.tel = &s
}

// Tel returns the tel value in the mutation.
func (m *DentistMutation) Tel() (r string, exists bool) {
	v := m.tel
	if v == nil {
		return
	}
	return *v, true
}

// OldTel returns the old tel value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTel: %w", err)
	}
	return oldValue.Tel, nil
}

// ResetTel reset all changes of the "tel" field.
func (m *DentistMutation) ResetTel() {
	m.tel = nil
}

// SetEmail sets the email field.
func (m *DentistMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *DentistMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *DentistMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *DentistMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *DentistMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the Dentist.
// If the Dentist object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DentistMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *DentistMutation) ResetPassword() {
	m.password = nil
}

// SetNurseID sets the nurse edge to Nurse by id.
func (m *DentistMutation) SetNurseID(id int) {
	m.nurse = &id
}

// ClearNurse clears the nurse edge to Nurse.
func (m *DentistMutation) ClearNurse() {
	m.clearednurse = true
}

// NurseCleared returns if the edge nurse was cleared.
func (m *DentistMutation) NurseCleared() bool {
	return m.clearednurse
}

// NurseID returns the nurse id in the mutation.
func (m *DentistMutation) NurseID() (id int, exists bool) {
	if m.nurse != nil {
		return *m.nurse, true
	}
	return
}

// NurseIDs returns the nurse ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NurseID instead. It exists only for internal usage by the builders.
func (m *DentistMutation) NurseIDs() (ids []int) {
	if id := m.nurse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNurse reset all changes of the "nurse" edge.
func (m *DentistMutation) ResetNurse() {
	m.nurse = nil
	m.clearednurse = false
}

// SetDegreeID sets the degree edge to Degree by id.
func (m *DentistMutation) SetDegreeID(id int) {
	m.degree = &id
}

// ClearDegree clears the degree edge to Degree.
func (m *DentistMutation) ClearDegree() {
	m.cleareddegree = true
}

// DegreeCleared returns if the edge degree was cleared.
func (m *DentistMutation) DegreeCleared() bool {
	return m.cleareddegree
}

// DegreeID returns the degree id in the mutation.
func (m *DentistMutation) DegreeID() (id int, exists bool) {
	if m.degree != nil {
		return *m.degree, true
	}
	return
}

// DegreeIDs returns the degree ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DegreeID instead. It exists only for internal usage by the builders.
func (m *DentistMutation) DegreeIDs() (ids []int) {
	if id := m.degree; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDegree reset all changes of the "degree" edge.
func (m *DentistMutation) ResetDegree() {
	m.degree = nil
	m.cleareddegree = false
}

// SetExpertID sets the expert edge to Expert by id.
func (m *DentistMutation) SetExpertID(id int) {
	m.expert = &id
}

// ClearExpert clears the expert edge to Expert.
func (m *DentistMutation) ClearExpert() {
	m.clearedexpert = true
}

// ExpertCleared returns if the edge expert was cleared.
func (m *DentistMutation) ExpertCleared() bool {
	return m.clearedexpert
}

// ExpertID returns the expert id in the mutation.
func (m *DentistMutation) ExpertID() (id int, exists bool) {
	if m.expert != nil {
		return *m.expert, true
	}
	return
}

// ExpertIDs returns the expert ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ExpertID instead. It exists only for internal usage by the builders.
func (m *DentistMutation) ExpertIDs() (ids []int) {
	if id := m.expert; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExpert reset all changes of the "expert" edge.
func (m *DentistMutation) ResetExpert() {
	m.expert = nil
	m.clearedexpert = false
}

// SetGenderID sets the gender edge to Gender by id.
func (m *DentistMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *DentistMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *DentistMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *DentistMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *DentistMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *DentistMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (m *DentistMutation) AddMedicalfileIDs(ids ...int) {
	if m.medicalfiles == nil {
		m.medicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.medicalfiles[ids[i]] = struct{}{}
	}
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (m *DentistMutation) RemoveMedicalfileIDs(ids ...int) {
	if m.removedmedicalfiles == nil {
		m.removedmedicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmedicalfiles[ids[i]] = struct{}{}
	}
}

// RemovedMedicalfiles returns the removed ids of medicalfiles.
func (m *DentistMutation) RemovedMedicalfilesIDs() (ids []int) {
	for id := range m.removedmedicalfiles {
		ids = append(ids, id)
	}
	return
}

// MedicalfilesIDs returns the medicalfiles ids in the mutation.
func (m *DentistMutation) MedicalfilesIDs() (ids []int) {
	for id := range m.medicalfiles {
		ids = append(ids, id)
	}
	return
}

// ResetMedicalfiles reset all changes of the "medicalfiles" edge.
func (m *DentistMutation) ResetMedicalfiles() {
	m.medicalfiles = nil
	m.removedmedicalfiles = nil
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (m *DentistMutation) AddQueueIDs(ids ...int) {
	if m.queue == nil {
		m.queue = make(map[int]struct{})
	}
	for i := range ids {
		m.queue[ids[i]] = struct{}{}
	}
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (m *DentistMutation) RemoveQueueIDs(ids ...int) {
	if m.removedqueue == nil {
		m.removedqueue = make(map[int]struct{})
	}
	for i := range ids {
		m.removedqueue[ids[i]] = struct{}{}
	}
}

// RemovedQueue returns the removed ids of queue.
func (m *DentistMutation) RemovedQueueIDs() (ids []int) {
	for id := range m.removedqueue {
		ids = append(ids, id)
	}
	return
}

// QueueIDs returns the queue ids in the mutation.
func (m *DentistMutation) QueueIDs() (ids []int) {
	for id := range m.queue {
		ids = append(ids, id)
	}
	return
}

// ResetQueue reset all changes of the "queue" edge.
func (m *DentistMutation) ResetQueue() {
	m.queue = nil
	m.removedqueue = nil
}

// AddAppointmentIDs adds the appointment edge to Appointment by ids.
func (m *DentistMutation) AddAppointmentIDs(ids ...int) {
	if m.appointment == nil {
		m.appointment = make(map[int]struct{})
	}
	for i := range ids {
		m.appointment[ids[i]] = struct{}{}
	}
}

// RemoveAppointmentIDs removes the appointment edge to Appointment by ids.
func (m *DentistMutation) RemoveAppointmentIDs(ids ...int) {
	if m.removedappointment == nil {
		m.removedappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedappointment[ids[i]] = struct{}{}
	}
}

// RemovedAppointment returns the removed ids of appointment.
func (m *DentistMutation) RemovedAppointmentIDs() (ids []int) {
	for id := range m.removedappointment {
		ids = append(ids, id)
	}
	return
}

// AppointmentIDs returns the appointment ids in the mutation.
func (m *DentistMutation) AppointmentIDs() (ids []int) {
	for id := range m.appointment {
		ids = append(ids, id)
	}
	return
}

// ResetAppointment reset all changes of the "appointment" edge.
func (m *DentistMutation) ResetAppointment() {
	m.appointment = nil
	m.removedappointment = nil
}

// Op returns the operation name.
func (m *DentistMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dentist).
func (m *DentistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DentistMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, dentist.FieldName)
	}
	if m.age != nil {
		fields = append(fields, dentist.FieldAge)
	}
	if m.cardid != nil {
		fields = append(fields, dentist.FieldCardid)
	}
	if m.birthday != nil {
		fields = append(fields, dentist.FieldBirthday)
	}
	if m.experience != nil {
		fields = append(fields, dentist.FieldExperience)
	}
	if m.tel != nil {
		fields = append(fields, dentist.FieldTel)
	}
	if m.email != nil {
		fields = append(fields, dentist.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, dentist.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DentistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dentist.FieldName:
		return m.Name()
	case dentist.FieldAge:
		return m.Age()
	case dentist.FieldCardid:
		return m.Cardid()
	case dentist.FieldBirthday:
		return m.Birthday()
	case dentist.FieldExperience:
		return m.Experience()
	case dentist.FieldTel:
		return m.Tel()
	case dentist.FieldEmail:
		return m.Email()
	case dentist.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DentistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dentist.FieldName:
		return m.OldName(ctx)
	case dentist.FieldAge:
		return m.OldAge(ctx)
	case dentist.FieldCardid:
		return m.OldCardid(ctx)
	case dentist.FieldBirthday:
		return m.OldBirthday(ctx)
	case dentist.FieldExperience:
		return m.OldExperience(ctx)
	case dentist.FieldTel:
		return m.OldTel(ctx)
	case dentist.FieldEmail:
		return m.OldEmail(ctx)
	case dentist.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Dentist field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DentistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dentist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case dentist.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case dentist.FieldCardid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCardid(v)
		return nil
	case dentist.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case dentist.FieldExperience:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExperience(v)
		return nil
	case dentist.FieldTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTel(v)
		return nil
	case dentist.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case dentist.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Dentist field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DentistMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, dentist.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DentistMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case dentist.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DentistMutation) AddField(name string, value ent.Value) error {
	switch name {
	case dentist.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Dentist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DentistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DentistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DentistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dentist nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DentistMutation) ResetField(name string) error {
	switch name {
	case dentist.FieldName:
		m.ResetName()
		return nil
	case dentist.FieldAge:
		m.ResetAge()
		return nil
	case dentist.FieldCardid:
		m.ResetCardid()
		return nil
	case dentist.FieldBirthday:
		m.ResetBirthday()
		return nil
	case dentist.FieldExperience:
		m.ResetExperience()
		return nil
	case dentist.FieldTel:
		m.ResetTel()
		return nil
	case dentist.FieldEmail:
		m.ResetEmail()
		return nil
	case dentist.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Dentist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DentistMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.nurse != nil {
		edges = append(edges, dentist.EdgeNurse)
	}
	if m.degree != nil {
		edges = append(edges, dentist.EdgeDegree)
	}
	if m.expert != nil {
		edges = append(edges, dentist.EdgeExpert)
	}
	if m.gender != nil {
		edges = append(edges, dentist.EdgeGender)
	}
	if m.medicalfiles != nil {
		edges = append(edges, dentist.EdgeMedicalfiles)
	}
	if m.queue != nil {
		edges = append(edges, dentist.EdgeQueue)
	}
	if m.appointment != nil {
		edges = append(edges, dentist.EdgeAppointment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DentistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dentist.EdgeNurse:
		if id := m.nurse; id != nil {
			return []ent.Value{*id}
		}
	case dentist.EdgeDegree:
		if id := m.degree; id != nil {
			return []ent.Value{*id}
		}
	case dentist.EdgeExpert:
		if id := m.expert; id != nil {
			return []ent.Value{*id}
		}
	case dentist.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case dentist.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.medicalfiles))
		for id := range m.medicalfiles {
			ids = append(ids, id)
		}
		return ids
	case dentist.EdgeQueue:
		ids := make([]ent.Value, 0, len(m.queue))
		for id := range m.queue {
			ids = append(ids, id)
		}
		return ids
	case dentist.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.appointment))
		for id := range m.appointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DentistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedmedicalfiles != nil {
		edges = append(edges, dentist.EdgeMedicalfiles)
	}
	if m.removedqueue != nil {
		edges = append(edges, dentist.EdgeQueue)
	}
	if m.removedappointment != nil {
		edges = append(edges, dentist.EdgeAppointment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DentistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dentist.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.removedmedicalfiles))
		for id := range m.removedmedicalfiles {
			ids = append(ids, id)
		}
		return ids
	case dentist.EdgeQueue:
		ids := make([]ent.Value, 0, len(m.removedqueue))
		for id := range m.removedqueue {
			ids = append(ids, id)
		}
		return ids
	case dentist.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.removedappointment))
		for id := range m.removedappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DentistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearednurse {
		edges = append(edges, dentist.EdgeNurse)
	}
	if m.cleareddegree {
		edges = append(edges, dentist.EdgeDegree)
	}
	if m.clearedexpert {
		edges = append(edges, dentist.EdgeExpert)
	}
	if m.clearedgender {
		edges = append(edges, dentist.EdgeGender)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DentistMutation) EdgeCleared(name string) bool {
	switch name {
	case dentist.EdgeNurse:
		return m.clearednurse
	case dentist.EdgeDegree:
		return m.cleareddegree
	case dentist.EdgeExpert:
		return m.clearedexpert
	case dentist.EdgeGender:
		return m.clearedgender
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DentistMutation) ClearEdge(name string) error {
	switch name {
	case dentist.EdgeNurse:
		m.ClearNurse()
		return nil
	case dentist.EdgeDegree:
		m.ClearDegree()
		return nil
	case dentist.EdgeExpert:
		m.ClearExpert()
		return nil
	case dentist.EdgeGender:
		m.ClearGender()
		return nil
	}
	return fmt.Errorf("unknown Dentist unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DentistMutation) ResetEdge(name string) error {
	switch name {
	case dentist.EdgeNurse:
		m.ResetNurse()
		return nil
	case dentist.EdgeDegree:
		m.ResetDegree()
		return nil
	case dentist.EdgeExpert:
		m.ResetExpert()
		return nil
	case dentist.EdgeGender:
		m.ResetGender()
		return nil
	case dentist.EdgeMedicalfiles:
		m.ResetMedicalfiles()
		return nil
	case dentist.EdgeQueue:
		m.ResetQueue()
		return nil
	case dentist.EdgeAppointment:
		m.ResetAppointment()
		return nil
	}
	return fmt.Errorf("unknown Dentist edge %s", name)
}

// DiseaseMutation represents an operation that mutate the Diseases
// nodes in the graph.
type DiseaseMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	patients        map[int]struct{}
	removedpatients map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Disease, error)
}

var _ ent.Mutation = (*DiseaseMutation)(nil)

// diseaseOption allows to manage the mutation configuration using functional options.
type diseaseOption func(*DiseaseMutation)

// newDiseaseMutation creates new mutation for $n.Name.
func newDiseaseMutation(c config, op Op, opts ...diseaseOption) *DiseaseMutation {
	m := &DiseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseID sets the id field of the mutation.
func withDiseaseID(id int) diseaseOption {
	return func(m *DiseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Disease
		)
		m.oldValue = func(ctx context.Context) (*Disease, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Disease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDisease sets the old Disease of the mutation.
func withDisease(node *Disease) diseaseOption {
	return func(m *DiseaseMutation) {
		m.oldValue = func(context.Context) (*Disease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DiseaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DiseaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Disease.
// If the Disease object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiseaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DiseaseMutation) ResetName() {
	m.name = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *DiseaseMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *DiseaseMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *DiseaseMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *DiseaseMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *DiseaseMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *DiseaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Disease).
func (m *DiseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiseaseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, disease.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case disease.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Disease field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case disease.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Disease nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiseaseMutation) ResetField(name string) error {
	switch name {
	case disease.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, disease.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, disease.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiseaseMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiseaseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiseaseMutation) ResetEdge(name string) error {
	switch name {
	case disease.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown Disease edge %s", name)
}

// ExpertMutation represents an operation that mutate the Experts
// nodes in the graph.
type ExpertMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	dentists        map[int]struct{}
	removeddentists map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Expert, error)
}

var _ ent.Mutation = (*ExpertMutation)(nil)

// expertOption allows to manage the mutation configuration using functional options.
type expertOption func(*ExpertMutation)

// newExpertMutation creates new mutation for $n.Name.
func newExpertMutation(c config, op Op, opts ...expertOption) *ExpertMutation {
	m := &ExpertMutation{
		config:        c,
		op:            op,
		typ:           TypeExpert,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExpertID sets the id field of the mutation.
func withExpertID(id int) expertOption {
	return func(m *ExpertMutation) {
		var (
			err   error
			once  sync.Once
			value *Expert
		)
		m.oldValue = func(ctx context.Context) (*Expert, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Expert.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExpert sets the old Expert of the mutation.
func withExpert(node *Expert) expertOption {
	return func(m *ExpertMutation) {
		m.oldValue = func(context.Context) (*Expert, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExpertMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExpertMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ExpertMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ExpertMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ExpertMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Expert.
// If the Expert object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ExpertMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ExpertMutation) ResetName() {
	m.name = nil
}

// AddDentistIDs adds the dentists edge to Dentist by ids.
func (m *ExpertMutation) AddDentistIDs(ids ...int) {
	if m.dentists == nil {
		m.dentists = make(map[int]struct{})
	}
	for i := range ids {
		m.dentists[ids[i]] = struct{}{}
	}
}

// RemoveDentistIDs removes the dentists edge to Dentist by ids.
func (m *ExpertMutation) RemoveDentistIDs(ids ...int) {
	if m.removeddentists == nil {
		m.removeddentists = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddentists[ids[i]] = struct{}{}
	}
}

// RemovedDentists returns the removed ids of dentists.
func (m *ExpertMutation) RemovedDentistsIDs() (ids []int) {
	for id := range m.removeddentists {
		ids = append(ids, id)
	}
	return
}

// DentistsIDs returns the dentists ids in the mutation.
func (m *ExpertMutation) DentistsIDs() (ids []int) {
	for id := range m.dentists {
		ids = append(ids, id)
	}
	return
}

// ResetDentists reset all changes of the "dentists" edge.
func (m *ExpertMutation) ResetDentists() {
	m.dentists = nil
	m.removeddentists = nil
}

// Op returns the operation name.
func (m *ExpertMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Expert).
func (m *ExpertMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ExpertMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, expert.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ExpertMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case expert.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ExpertMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case expert.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Expert field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ExpertMutation) SetField(name string, value ent.Value) error {
	switch name {
	case expert.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Expert field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ExpertMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ExpertMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ExpertMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Expert numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ExpertMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ExpertMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExpertMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Expert nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ExpertMutation) ResetField(name string) error {
	switch name {
	case expert.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Expert field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ExpertMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dentists != nil {
		edges = append(edges, expert.EdgeDentists)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ExpertMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case expert.EdgeDentists:
		ids := make([]ent.Value, 0, len(m.dentists))
		for id := range m.dentists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ExpertMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddentists != nil {
		edges = append(edges, expert.EdgeDentists)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ExpertMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case expert.EdgeDentists:
		ids := make([]ent.Value, 0, len(m.removeddentists))
		for id := range m.removeddentists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ExpertMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ExpertMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ExpertMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Expert unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ExpertMutation) ResetEdge(name string) error {
	switch name {
	case expert.EdgeDentists:
		m.ResetDentists()
		return nil
	}
	return fmt.Errorf("unknown Expert edge %s", name)
}

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	patients        map[int]struct{}
	removedpatients map[int]struct{}
	dentists        map[int]struct{}
	removeddentists map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *GenderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *GenderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *GenderMutation) ResetName() {
	m.name = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *GenderMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *GenderMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *GenderMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *GenderMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *GenderMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// AddDentistIDs adds the dentists edge to Dentist by ids.
func (m *GenderMutation) AddDentistIDs(ids ...int) {
	if m.dentists == nil {
		m.dentists = make(map[int]struct{})
	}
	for i := range ids {
		m.dentists[ids[i]] = struct{}{}
	}
}

// RemoveDentistIDs removes the dentists edge to Dentist by ids.
func (m *GenderMutation) RemoveDentistIDs(ids ...int) {
	if m.removeddentists == nil {
		m.removeddentists = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddentists[ids[i]] = struct{}{}
	}
}

// RemovedDentists returns the removed ids of dentists.
func (m *GenderMutation) RemovedDentistsIDs() (ids []int) {
	for id := range m.removeddentists {
		ids = append(ids, id)
	}
	return
}

// DentistsIDs returns the dentists ids in the mutation.
func (m *GenderMutation) DentistsIDs() (ids []int) {
	for id := range m.dentists {
		ids = append(ids, id)
	}
	return
}

// ResetDentists reset all changes of the "dentists" edge.
func (m *GenderMutation) ResetDentists() {
	m.dentists = nil
	m.removeddentists = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, gender.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.patients != nil {
		edges = append(edges, gender.EdgePatients)
	}
	if m.dentists != nil {
		edges = append(edges, gender.EdgeDentists)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	case gender.EdgeDentists:
		ids := make([]ent.Value, 0, len(m.dentists))
		for id := range m.dentists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpatients != nil {
		edges = append(edges, gender.EdgePatients)
	}
	if m.removeddentists != nil {
		edges = append(edges, gender.EdgeDentists)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	case gender.EdgeDentists:
		ids := make([]ent.Value, 0, len(m.removeddentists))
		for id := range m.removeddentists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgePatients:
		m.ResetPatients()
		return nil
	case gender.EdgeDentists:
		m.ResetDentists()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// MedicalCareMutation represents an operation that mutate the MedicalCares
// nodes in the graph.
type MedicalCareMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	patients        map[int]struct{}
	removedpatients map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*MedicalCare, error)
}

var _ ent.Mutation = (*MedicalCareMutation)(nil)

// medicalcareOption allows to manage the mutation configuration using functional options.
type medicalcareOption func(*MedicalCareMutation)

// newMedicalCareMutation creates new mutation for $n.Name.
func newMedicalCareMutation(c config, op Op, opts ...medicalcareOption) *MedicalCareMutation {
	m := &MedicalCareMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicalCare,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicalCareID sets the id field of the mutation.
func withMedicalCareID(id int) medicalcareOption {
	return func(m *MedicalCareMutation) {
		var (
			err   error
			once  sync.Once
			value *MedicalCare
		)
		m.oldValue = func(ctx context.Context) (*MedicalCare, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MedicalCare.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicalCare sets the old MedicalCare of the mutation.
func withMedicalCare(node *MedicalCare) medicalcareOption {
	return func(m *MedicalCareMutation) {
		m.oldValue = func(context.Context) (*MedicalCare, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicalCareMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicalCareMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicalCareMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *MedicalCareMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *MedicalCareMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the MedicalCare.
// If the MedicalCare object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalCareMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *MedicalCareMutation) ResetName() {
	m.name = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *MedicalCareMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *MedicalCareMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *MedicalCareMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *MedicalCareMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *MedicalCareMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// Op returns the operation name.
func (m *MedicalCareMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MedicalCare).
func (m *MedicalCareMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicalCareMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, medicalcare.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicalCareMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicalcare.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicalCareMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicalcare.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown MedicalCare field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalCareMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicalcare.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown MedicalCare field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicalCareMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicalCareMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalCareMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MedicalCare numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicalCareMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicalCareMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicalCareMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MedicalCare nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicalCareMutation) ResetField(name string) error {
	switch name {
	case medicalcare.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown MedicalCare field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicalCareMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patients != nil {
		edges = append(edges, medicalcare.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicalCareMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicalcare.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicalCareMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatients != nil {
		edges = append(edges, medicalcare.EdgePatients)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicalCareMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case medicalcare.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicalCareMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicalCareMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicalCareMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MedicalCare unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicalCareMutation) ResetEdge(name string) error {
	switch name {
	case medicalcare.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown MedicalCare edge %s", name)
}

// MedicalfileMutation represents an operation that mutate the Medicalfiles
// nodes in the graph.
type MedicalfileMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	detail                *string
	added_time            *time.Time
	clearedFields         map[string]struct{}
	dentist               *int
	cleareddentist        bool
	patient               *int
	clearedpatient        bool
	nurse                 *int
	clearednurse          bool
	dentalexpenses        map[int]struct{}
	removeddentalexpenses map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Medicalfile, error)
}

var _ ent.Mutation = (*MedicalfileMutation)(nil)

// medicalfileOption allows to manage the mutation configuration using functional options.
type medicalfileOption func(*MedicalfileMutation)

// newMedicalfileMutation creates new mutation for $n.Name.
func newMedicalfileMutation(c config, op Op, opts ...medicalfileOption) *MedicalfileMutation {
	m := &MedicalfileMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicalfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicalfileID sets the id field of the mutation.
func withMedicalfileID(id int) medicalfileOption {
	return func(m *MedicalfileMutation) {
		var (
			err   error
			once  sync.Once
			value *Medicalfile
		)
		m.oldValue = func(ctx context.Context) (*Medicalfile, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Medicalfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicalfile sets the old Medicalfile of the mutation.
func withMedicalfile(node *Medicalfile) medicalfileOption {
	return func(m *MedicalfileMutation) {
		m.oldValue = func(context.Context) (*Medicalfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicalfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicalfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicalfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDetail sets the detail field.
func (m *MedicalfileMutation) SetDetail(s string) {
	m.detail = &s
}

// Detail returns the detail value in the mutation.
func (m *MedicalfileMutation) Detail() (r string, exists bool) {
	v := m.detail
	if v == nil {
		return
	}
	return *v, true
}

// OldDetail returns the old detail value of the Medicalfile.
// If the Medicalfile object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalfileMutation) OldDetail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetail: %w", err)
	}
	return oldValue.Detail, nil
}

// ResetDetail reset all changes of the "detail" field.
func (m *MedicalfileMutation) ResetDetail() {
	m.detail = nil
}

// SetAddedTime sets the added_time field.
func (m *MedicalfileMutation) SetAddedTime(t time.Time) {
	m.added_time = &t
}

// AddedTime returns the added_time value in the mutation.
func (m *MedicalfileMutation) AddedTime() (r time.Time, exists bool) {
	v := m.added_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old added_time value of the Medicalfile.
// If the Medicalfile object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicalfileMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime reset all changes of the "added_time" field.
func (m *MedicalfileMutation) ResetAddedTime() {
	m.added_time = nil
}

// SetDentistID sets the dentist edge to Dentist by id.
func (m *MedicalfileMutation) SetDentistID(id int) {
	m.dentist = &id
}

// ClearDentist clears the dentist edge to Dentist.
func (m *MedicalfileMutation) ClearDentist() {
	m.cleareddentist = true
}

// DentistCleared returns if the edge dentist was cleared.
func (m *MedicalfileMutation) DentistCleared() bool {
	return m.cleareddentist
}

// DentistID returns the dentist id in the mutation.
func (m *MedicalfileMutation) DentistID() (id int, exists bool) {
	if m.dentist != nil {
		return *m.dentist, true
	}
	return
}

// DentistIDs returns the dentist ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DentistID instead. It exists only for internal usage by the builders.
func (m *MedicalfileMutation) DentistIDs() (ids []int) {
	if id := m.dentist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDentist reset all changes of the "dentist" edge.
func (m *MedicalfileMutation) ResetDentist() {
	m.dentist = nil
	m.cleareddentist = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *MedicalfileMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *MedicalfileMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *MedicalfileMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *MedicalfileMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *MedicalfileMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *MedicalfileMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetNurseID sets the nurse edge to Nurse by id.
func (m *MedicalfileMutation) SetNurseID(id int) {
	m.nurse = &id
}

// ClearNurse clears the nurse edge to Nurse.
func (m *MedicalfileMutation) ClearNurse() {
	m.clearednurse = true
}

// NurseCleared returns if the edge nurse was cleared.
func (m *MedicalfileMutation) NurseCleared() bool {
	return m.clearednurse
}

// NurseID returns the nurse id in the mutation.
func (m *MedicalfileMutation) NurseID() (id int, exists bool) {
	if m.nurse != nil {
		return *m.nurse, true
	}
	return
}

// NurseIDs returns the nurse ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NurseID instead. It exists only for internal usage by the builders.
func (m *MedicalfileMutation) NurseIDs() (ids []int) {
	if id := m.nurse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNurse reset all changes of the "nurse" edge.
func (m *MedicalfileMutation) ResetNurse() {
	m.nurse = nil
	m.clearednurse = false
}

// AddDentalexpenseIDs adds the dentalexpenses edge to DentalExpense by ids.
func (m *MedicalfileMutation) AddDentalexpenseIDs(ids ...int) {
	if m.dentalexpenses == nil {
		m.dentalexpenses = make(map[int]struct{})
	}
	for i := range ids {
		m.dentalexpenses[ids[i]] = struct{}{}
	}
}

// RemoveDentalexpenseIDs removes the dentalexpenses edge to DentalExpense by ids.
func (m *MedicalfileMutation) RemoveDentalexpenseIDs(ids ...int) {
	if m.removeddentalexpenses == nil {
		m.removeddentalexpenses = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddentalexpenses[ids[i]] = struct{}{}
	}
}

// RemovedDentalexpenses returns the removed ids of dentalexpenses.
func (m *MedicalfileMutation) RemovedDentalexpensesIDs() (ids []int) {
	for id := range m.removeddentalexpenses {
		ids = append(ids, id)
	}
	return
}

// DentalexpensesIDs returns the dentalexpenses ids in the mutation.
func (m *MedicalfileMutation) DentalexpensesIDs() (ids []int) {
	for id := range m.dentalexpenses {
		ids = append(ids, id)
	}
	return
}

// ResetDentalexpenses reset all changes of the "dentalexpenses" edge.
func (m *MedicalfileMutation) ResetDentalexpenses() {
	m.dentalexpenses = nil
	m.removeddentalexpenses = nil
}

// Op returns the operation name.
func (m *MedicalfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Medicalfile).
func (m *MedicalfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicalfileMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.detail != nil {
		fields = append(fields, medicalfile.FieldDetail)
	}
	if m.added_time != nil {
		fields = append(fields, medicalfile.FieldAddedTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicalfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicalfile.FieldDetail:
		return m.Detail()
	case medicalfile.FieldAddedTime:
		return m.AddedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicalfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicalfile.FieldDetail:
		return m.OldDetail(ctx)
	case medicalfile.FieldAddedTime:
		return m.OldAddedTime(ctx)
	}
	return nil, fmt.Errorf("unknown Medicalfile field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicalfile.FieldDetail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetail(v)
		return nil
	case medicalfile.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	}
	return fmt.Errorf("unknown Medicalfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicalfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicalfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicalfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Medicalfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicalfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicalfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicalfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Medicalfile nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicalfileMutation) ResetField(name string) error {
	switch name {
	case medicalfile.FieldDetail:
		m.ResetDetail()
		return nil
	case medicalfile.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	}
	return fmt.Errorf("unknown Medicalfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicalfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.dentist != nil {
		edges = append(edges, medicalfile.EdgeDentist)
	}
	if m.patient != nil {
		edges = append(edges, medicalfile.EdgePatient)
	}
	if m.nurse != nil {
		edges = append(edges, medicalfile.EdgeNurse)
	}
	if m.dentalexpenses != nil {
		edges = append(edges, medicalfile.EdgeDentalexpenses)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicalfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicalfile.EdgeDentist:
		if id := m.dentist; id != nil {
			return []ent.Value{*id}
		}
	case medicalfile.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case medicalfile.EdgeNurse:
		if id := m.nurse; id != nil {
			return []ent.Value{*id}
		}
	case medicalfile.EdgeDentalexpenses:
		ids := make([]ent.Value, 0, len(m.dentalexpenses))
		for id := range m.dentalexpenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicalfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeddentalexpenses != nil {
		edges = append(edges, medicalfile.EdgeDentalexpenses)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicalfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case medicalfile.EdgeDentalexpenses:
		ids := make([]ent.Value, 0, len(m.removeddentalexpenses))
		for id := range m.removeddentalexpenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicalfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddentist {
		edges = append(edges, medicalfile.EdgeDentist)
	}
	if m.clearedpatient {
		edges = append(edges, medicalfile.EdgePatient)
	}
	if m.clearednurse {
		edges = append(edges, medicalfile.EdgeNurse)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicalfileMutation) EdgeCleared(name string) bool {
	switch name {
	case medicalfile.EdgeDentist:
		return m.cleareddentist
	case medicalfile.EdgePatient:
		return m.clearedpatient
	case medicalfile.EdgeNurse:
		return m.clearednurse
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicalfileMutation) ClearEdge(name string) error {
	switch name {
	case medicalfile.EdgeDentist:
		m.ClearDentist()
		return nil
	case medicalfile.EdgePatient:
		m.ClearPatient()
		return nil
	case medicalfile.EdgeNurse:
		m.ClearNurse()
		return nil
	}
	return fmt.Errorf("unknown Medicalfile unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicalfileMutation) ResetEdge(name string) error {
	switch name {
	case medicalfile.EdgeDentist:
		m.ResetDentist()
		return nil
	case medicalfile.EdgePatient:
		m.ResetPatient()
		return nil
	case medicalfile.EdgeNurse:
		m.ResetNurse()
		return nil
	case medicalfile.EdgeDentalexpenses:
		m.ResetDentalexpenses()
		return nil
	}
	return fmt.Errorf("unknown Medicalfile edge %s", name)
}

// NurseMutation represents an operation that mutate the Nurses
// nodes in the graph.
type NurseMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	nurse_name            *string
	nurse_age             *int
	addnurse_age          *int
	email                 *string
	password              *string
	clearedFields         map[string]struct{}
	queue                 map[int]struct{}
	removedqueue          map[int]struct{}
	medicalfiles          map[int]struct{}
	removedmedicalfiles   map[int]struct{}
	dentalexpenses        map[int]struct{}
	removeddentalexpenses map[int]struct{}
	patients              map[int]struct{}
	removedpatients       map[int]struct{}
	dentists              map[int]struct{}
	removeddentists       map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Nurse, error)
}

var _ ent.Mutation = (*NurseMutation)(nil)

// nurseOption allows to manage the mutation configuration using functional options.
type nurseOption func(*NurseMutation)

// newNurseMutation creates new mutation for $n.Name.
func newNurseMutation(c config, op Op, opts ...nurseOption) *NurseMutation {
	m := &NurseMutation{
		config:        c,
		op:            op,
		typ:           TypeNurse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNurseID sets the id field of the mutation.
func withNurseID(id int) nurseOption {
	return func(m *NurseMutation) {
		var (
			err   error
			once  sync.Once
			value *Nurse
		)
		m.oldValue = func(ctx context.Context) (*Nurse, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Nurse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNurse sets the old Nurse of the mutation.
func withNurse(node *Nurse) nurseOption {
	return func(m *NurseMutation) {
		m.oldValue = func(context.Context) (*Nurse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NurseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NurseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *NurseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNurseName sets the nurse_name field.
func (m *NurseMutation) SetNurseName(s string) {
	m.nurse_name = &s
}

// NurseName returns the nurse_name value in the mutation.
func (m *NurseMutation) NurseName() (r string, exists bool) {
	v := m.nurse_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNurseName returns the old nurse_name value of the Nurse.
// If the Nurse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NurseMutation) OldNurseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNurseName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNurseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNurseName: %w", err)
	}
	return oldValue.NurseName, nil
}

// ResetNurseName reset all changes of the "nurse_name" field.
func (m *NurseMutation) ResetNurseName() {
	m.nurse_name = nil
}

// SetNurseAge sets the nurse_age field.
func (m *NurseMutation) SetNurseAge(i int) {
	m.nurse_age = &i
	m.addnurse_age = nil
}

// NurseAge returns the nurse_age value in the mutation.
func (m *NurseMutation) NurseAge() (r int, exists bool) {
	v := m.nurse_age
	if v == nil {
		return
	}
	return *v, true
}

// OldNurseAge returns the old nurse_age value of the Nurse.
// If the Nurse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NurseMutation) OldNurseAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNurseAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNurseAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNurseAge: %w", err)
	}
	return oldValue.NurseAge, nil
}

// AddNurseAge adds i to nurse_age.
func (m *NurseMutation) AddNurseAge(i int) {
	if m.addnurse_age != nil {
		*m.addnurse_age += i
	} else {
		m.addnurse_age = &i
	}
}

// AddedNurseAge returns the value that was added to the nurse_age field in this mutation.
func (m *NurseMutation) AddedNurseAge() (r int, exists bool) {
	v := m.addnurse_age
	if v == nil {
		return
	}
	return *v, true
}

// ResetNurseAge reset all changes of the "nurse_age" field.
func (m *NurseMutation) ResetNurseAge() {
	m.nurse_age = nil
	m.addnurse_age = nil
}

// SetEmail sets the email field.
func (m *NurseMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *NurseMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the Nurse.
// If the Nurse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NurseMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *NurseMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *NurseMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *NurseMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the Nurse.
// If the Nurse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NurseMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *NurseMutation) ResetPassword() {
	m.password = nil
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (m *NurseMutation) AddQueueIDs(ids ...int) {
	if m.queue == nil {
		m.queue = make(map[int]struct{})
	}
	for i := range ids {
		m.queue[ids[i]] = struct{}{}
	}
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (m *NurseMutation) RemoveQueueIDs(ids ...int) {
	if m.removedqueue == nil {
		m.removedqueue = make(map[int]struct{})
	}
	for i := range ids {
		m.removedqueue[ids[i]] = struct{}{}
	}
}

// RemovedQueue returns the removed ids of queue.
func (m *NurseMutation) RemovedQueueIDs() (ids []int) {
	for id := range m.removedqueue {
		ids = append(ids, id)
	}
	return
}

// QueueIDs returns the queue ids in the mutation.
func (m *NurseMutation) QueueIDs() (ids []int) {
	for id := range m.queue {
		ids = append(ids, id)
	}
	return
}

// ResetQueue reset all changes of the "queue" edge.
func (m *NurseMutation) ResetQueue() {
	m.queue = nil
	m.removedqueue = nil
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (m *NurseMutation) AddMedicalfileIDs(ids ...int) {
	if m.medicalfiles == nil {
		m.medicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.medicalfiles[ids[i]] = struct{}{}
	}
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (m *NurseMutation) RemoveMedicalfileIDs(ids ...int) {
	if m.removedmedicalfiles == nil {
		m.removedmedicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmedicalfiles[ids[i]] = struct{}{}
	}
}

// RemovedMedicalfiles returns the removed ids of medicalfiles.
func (m *NurseMutation) RemovedMedicalfilesIDs() (ids []int) {
	for id := range m.removedmedicalfiles {
		ids = append(ids, id)
	}
	return
}

// MedicalfilesIDs returns the medicalfiles ids in the mutation.
func (m *NurseMutation) MedicalfilesIDs() (ids []int) {
	for id := range m.medicalfiles {
		ids = append(ids, id)
	}
	return
}

// ResetMedicalfiles reset all changes of the "medicalfiles" edge.
func (m *NurseMutation) ResetMedicalfiles() {
	m.medicalfiles = nil
	m.removedmedicalfiles = nil
}

// AddDentalexpenseIDs adds the dentalexpenses edge to DentalExpense by ids.
func (m *NurseMutation) AddDentalexpenseIDs(ids ...int) {
	if m.dentalexpenses == nil {
		m.dentalexpenses = make(map[int]struct{})
	}
	for i := range ids {
		m.dentalexpenses[ids[i]] = struct{}{}
	}
}

// RemoveDentalexpenseIDs removes the dentalexpenses edge to DentalExpense by ids.
func (m *NurseMutation) RemoveDentalexpenseIDs(ids ...int) {
	if m.removeddentalexpenses == nil {
		m.removeddentalexpenses = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddentalexpenses[ids[i]] = struct{}{}
	}
}

// RemovedDentalexpenses returns the removed ids of dentalexpenses.
func (m *NurseMutation) RemovedDentalexpensesIDs() (ids []int) {
	for id := range m.removeddentalexpenses {
		ids = append(ids, id)
	}
	return
}

// DentalexpensesIDs returns the dentalexpenses ids in the mutation.
func (m *NurseMutation) DentalexpensesIDs() (ids []int) {
	for id := range m.dentalexpenses {
		ids = append(ids, id)
	}
	return
}

// ResetDentalexpenses reset all changes of the "dentalexpenses" edge.
func (m *NurseMutation) ResetDentalexpenses() {
	m.dentalexpenses = nil
	m.removeddentalexpenses = nil
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (m *NurseMutation) AddPatientIDs(ids ...int) {
	if m.patients == nil {
		m.patients = make(map[int]struct{})
	}
	for i := range ids {
		m.patients[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (m *NurseMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatients == nil {
		m.removedpatients = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatients[ids[i]] = struct{}{}
	}
}

// RemovedPatients returns the removed ids of patients.
func (m *NurseMutation) RemovedPatientsIDs() (ids []int) {
	for id := range m.removedpatients {
		ids = append(ids, id)
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
func (m *NurseMutation) PatientsIDs() (ids []int) {
	for id := range m.patients {
		ids = append(ids, id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *NurseMutation) ResetPatients() {
	m.patients = nil
	m.removedpatients = nil
}

// AddDentistIDs adds the dentists edge to Dentist by ids.
func (m *NurseMutation) AddDentistIDs(ids ...int) {
	if m.dentists == nil {
		m.dentists = make(map[int]struct{})
	}
	for i := range ids {
		m.dentists[ids[i]] = struct{}{}
	}
}

// RemoveDentistIDs removes the dentists edge to Dentist by ids.
func (m *NurseMutation) RemoveDentistIDs(ids ...int) {
	if m.removeddentists == nil {
		m.removeddentists = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddentists[ids[i]] = struct{}{}
	}
}

// RemovedDentists returns the removed ids of dentists.
func (m *NurseMutation) RemovedDentistsIDs() (ids []int) {
	for id := range m.removeddentists {
		ids = append(ids, id)
	}
	return
}

// DentistsIDs returns the dentists ids in the mutation.
func (m *NurseMutation) DentistsIDs() (ids []int) {
	for id := range m.dentists {
		ids = append(ids, id)
	}
	return
}

// ResetDentists reset all changes of the "dentists" edge.
func (m *NurseMutation) ResetDentists() {
	m.dentists = nil
	m.removeddentists = nil
}

// Op returns the operation name.
func (m *NurseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Nurse).
func (m *NurseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *NurseMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.nurse_name != nil {
		fields = append(fields, nurse.FieldNurseName)
	}
	if m.nurse_age != nil {
		fields = append(fields, nurse.FieldNurseAge)
	}
	if m.email != nil {
		fields = append(fields, nurse.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, nurse.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *NurseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nurse.FieldNurseName:
		return m.NurseName()
	case nurse.FieldNurseAge:
		return m.NurseAge()
	case nurse.FieldEmail:
		return m.Email()
	case nurse.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *NurseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nurse.FieldNurseName:
		return m.OldNurseName(ctx)
	case nurse.FieldNurseAge:
		return m.OldNurseAge(ctx)
	case nurse.FieldEmail:
		return m.OldEmail(ctx)
	case nurse.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Nurse field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NurseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nurse.FieldNurseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNurseName(v)
		return nil
	case nurse.FieldNurseAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNurseAge(v)
		return nil
	case nurse.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case nurse.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Nurse field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *NurseMutation) AddedFields() []string {
	var fields []string
	if m.addnurse_age != nil {
		fields = append(fields, nurse.FieldNurseAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *NurseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nurse.FieldNurseAge:
		return m.AddedNurseAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NurseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nurse.FieldNurseAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNurseAge(v)
		return nil
	}
	return fmt.Errorf("unknown Nurse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *NurseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *NurseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *NurseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Nurse nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *NurseMutation) ResetField(name string) error {
	switch name {
	case nurse.FieldNurseName:
		m.ResetNurseName()
		return nil
	case nurse.FieldNurseAge:
		m.ResetNurseAge()
		return nil
	case nurse.FieldEmail:
		m.ResetEmail()
		return nil
	case nurse.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Nurse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *NurseMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.queue != nil {
		edges = append(edges, nurse.EdgeQueue)
	}
	if m.medicalfiles != nil {
		edges = append(edges, nurse.EdgeMedicalfiles)
	}
	if m.dentalexpenses != nil {
		edges = append(edges, nurse.EdgeDentalexpenses)
	}
	if m.patients != nil {
		edges = append(edges, nurse.EdgePatients)
	}
	if m.dentists != nil {
		edges = append(edges, nurse.EdgeDentists)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *NurseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nurse.EdgeQueue:
		ids := make([]ent.Value, 0, len(m.queue))
		for id := range m.queue {
			ids = append(ids, id)
		}
		return ids
	case nurse.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.medicalfiles))
		for id := range m.medicalfiles {
			ids = append(ids, id)
		}
		return ids
	case nurse.EdgeDentalexpenses:
		ids := make([]ent.Value, 0, len(m.dentalexpenses))
		for id := range m.dentalexpenses {
			ids = append(ids, id)
		}
		return ids
	case nurse.EdgePatients:
		ids := make([]ent.Value, 0, len(m.patients))
		for id := range m.patients {
			ids = append(ids, id)
		}
		return ids
	case nurse.EdgeDentists:
		ids := make([]ent.Value, 0, len(m.dentists))
		for id := range m.dentists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *NurseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedqueue != nil {
		edges = append(edges, nurse.EdgeQueue)
	}
	if m.removedmedicalfiles != nil {
		edges = append(edges, nurse.EdgeMedicalfiles)
	}
	if m.removeddentalexpenses != nil {
		edges = append(edges, nurse.EdgeDentalexpenses)
	}
	if m.removedpatients != nil {
		edges = append(edges, nurse.EdgePatients)
	}
	if m.removeddentists != nil {
		edges = append(edges, nurse.EdgeDentists)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *NurseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nurse.EdgeQueue:
		ids := make([]ent.Value, 0, len(m.removedqueue))
		for id := range m.removedqueue {
			ids = append(ids, id)
		}
		return ids
	case nurse.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.removedmedicalfiles))
		for id := range m.removedmedicalfiles {
			ids = append(ids, id)
		}
		return ids
	case nurse.EdgeDentalexpenses:
		ids := make([]ent.Value, 0, len(m.removeddentalexpenses))
		for id := range m.removeddentalexpenses {
			ids = append(ids, id)
		}
		return ids
	case nurse.EdgePatients:
		ids := make([]ent.Value, 0, len(m.removedpatients))
		for id := range m.removedpatients {
			ids = append(ids, id)
		}
		return ids
	case nurse.EdgeDentists:
		ids := make([]ent.Value, 0, len(m.removeddentists))
		for id := range m.removeddentists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *NurseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *NurseMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *NurseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Nurse unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *NurseMutation) ResetEdge(name string) error {
	switch name {
	case nurse.EdgeQueue:
		m.ResetQueue()
		return nil
	case nurse.EdgeMedicalfiles:
		m.ResetMedicalfiles()
		return nil
	case nurse.EdgeDentalexpenses:
		m.ResetDentalexpenses()
		return nil
	case nurse.EdgePatients:
		m.ResetPatients()
		return nil
	case nurse.EdgeDentists:
		m.ResetDentists()
		return nil
	}
	return fmt.Errorf("unknown Nurse edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	patient_ID          *string
	name                *string
	cardID              *string
	tel                 *string
	age                 *int
	addage              *int
	birthday            *time.Time
	clearedFields       map[string]struct{}
	gender              *int
	clearedgender       bool
	medicalcare         *int
	clearedmedicalcare  bool
	nurse               *int
	clearednurse        bool
	disease             *int
	cleareddisease      bool
	medicalfiles        map[int]struct{}
	removedmedicalfiles map[int]struct{}
	queue               map[int]struct{}
	removedqueue        map[int]struct{}
	appointment         map[int]struct{}
	removedappointment  map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientID sets the patient_ID field.
func (m *PatientMutation) SetPatientID(s string) {
	m.patient_ID = &s
}

// PatientID returns the patient_ID value in the mutation.
func (m *PatientMutation) PatientID() (r string, exists bool) {
	v := m.patient_ID
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientID returns the old patient_ID value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientID: %w", err)
	}
	return oldValue.PatientID, nil
}

// ResetPatientID reset all changes of the "patient_ID" field.
func (m *PatientMutation) ResetPatientID() {
	m.patient_ID = nil
}

// SetName sets the name field.
func (m *PatientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *PatientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *PatientMutation) ResetName() {
	m.name = nil
}

// SetCardID sets the cardID field.
func (m *PatientMutation) SetCardID(s string) {
	m.cardID = &s
}

// CardID returns the cardID value in the mutation.
func (m *PatientMutation) CardID() (r string, exists bool) {
	v := m.cardID
	if v == nil {
		return
	}
	return *v, true
}

// OldCardID returns the old cardID value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldCardID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCardID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCardID: %w", err)
	}
	return oldValue.CardID, nil
}

// ResetCardID reset all changes of the "cardID" field.
func (m *PatientMutation) ResetCardID() {
	m.cardID = nil
}

// SetTel sets the tel field.
func (m *PatientMutation) SetTel(s string) {
	m.tel = &s
}

// Tel returns the tel value in the mutation.
func (m *PatientMutation) Tel() (r string, exists bool) {
	v := m.tel
	if v == nil {
		return
	}
	return *v, true
}

// OldTel returns the old tel value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTel: %w", err)
	}
	return oldValue.Tel, nil
}

// ResetTel reset all changes of the "tel" field.
func (m *PatientMutation) ResetTel() {
	m.tel = nil
}

// SetAge sets the age field.
func (m *PatientMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *PatientMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *PatientMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *PatientMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *PatientMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetBirthday sets the birthday field.
func (m *PatientMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the birthday value in the mutation.
func (m *PatientMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old birthday value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldBirthday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirthday is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ResetBirthday reset all changes of the "birthday" field.
func (m *PatientMutation) ResetBirthday() {
	m.birthday = nil
}

// SetGenderID sets the gender edge to Gender by id.
func (m *PatientMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *PatientMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *PatientMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *PatientMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *PatientMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// SetMedicalcareID sets the medicalcare edge to MedicalCare by id.
func (m *PatientMutation) SetMedicalcareID(id int) {
	m.medicalcare = &id
}

// ClearMedicalcare clears the medicalcare edge to MedicalCare.
func (m *PatientMutation) ClearMedicalcare() {
	m.clearedmedicalcare = true
}

// MedicalcareCleared returns if the edge medicalcare was cleared.
func (m *PatientMutation) MedicalcareCleared() bool {
	return m.clearedmedicalcare
}

// MedicalcareID returns the medicalcare id in the mutation.
func (m *PatientMutation) MedicalcareID() (id int, exists bool) {
	if m.medicalcare != nil {
		return *m.medicalcare, true
	}
	return
}

// MedicalcareIDs returns the medicalcare ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MedicalcareID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) MedicalcareIDs() (ids []int) {
	if id := m.medicalcare; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedicalcare reset all changes of the "medicalcare" edge.
func (m *PatientMutation) ResetMedicalcare() {
	m.medicalcare = nil
	m.clearedmedicalcare = false
}

// SetNurseID sets the nurse edge to Nurse by id.
func (m *PatientMutation) SetNurseID(id int) {
	m.nurse = &id
}

// ClearNurse clears the nurse edge to Nurse.
func (m *PatientMutation) ClearNurse() {
	m.clearednurse = true
}

// NurseCleared returns if the edge nurse was cleared.
func (m *PatientMutation) NurseCleared() bool {
	return m.clearednurse
}

// NurseID returns the nurse id in the mutation.
func (m *PatientMutation) NurseID() (id int, exists bool) {
	if m.nurse != nil {
		return *m.nurse, true
	}
	return
}

// NurseIDs returns the nurse ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NurseID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) NurseIDs() (ids []int) {
	if id := m.nurse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNurse reset all changes of the "nurse" edge.
func (m *PatientMutation) ResetNurse() {
	m.nurse = nil
	m.clearednurse = false
}

// SetDiseaseID sets the disease edge to Disease by id.
func (m *PatientMutation) SetDiseaseID(id int) {
	m.disease = &id
}

// ClearDisease clears the disease edge to Disease.
func (m *PatientMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared returns if the edge disease was cleared.
func (m *PatientMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// DiseaseID returns the disease id in the mutation.
func (m *PatientMutation) DiseaseID() (id int, exists bool) {
	if m.disease != nil {
		return *m.disease, true
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DiseaseID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) DiseaseIDs() (ids []int) {
	if id := m.disease; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *PatientMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (m *PatientMutation) AddMedicalfileIDs(ids ...int) {
	if m.medicalfiles == nil {
		m.medicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.medicalfiles[ids[i]] = struct{}{}
	}
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (m *PatientMutation) RemoveMedicalfileIDs(ids ...int) {
	if m.removedmedicalfiles == nil {
		m.removedmedicalfiles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmedicalfiles[ids[i]] = struct{}{}
	}
}

// RemovedMedicalfiles returns the removed ids of medicalfiles.
func (m *PatientMutation) RemovedMedicalfilesIDs() (ids []int) {
	for id := range m.removedmedicalfiles {
		ids = append(ids, id)
	}
	return
}

// MedicalfilesIDs returns the medicalfiles ids in the mutation.
func (m *PatientMutation) MedicalfilesIDs() (ids []int) {
	for id := range m.medicalfiles {
		ids = append(ids, id)
	}
	return
}

// ResetMedicalfiles reset all changes of the "medicalfiles" edge.
func (m *PatientMutation) ResetMedicalfiles() {
	m.medicalfiles = nil
	m.removedmedicalfiles = nil
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (m *PatientMutation) AddQueueIDs(ids ...int) {
	if m.queue == nil {
		m.queue = make(map[int]struct{})
	}
	for i := range ids {
		m.queue[ids[i]] = struct{}{}
	}
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (m *PatientMutation) RemoveQueueIDs(ids ...int) {
	if m.removedqueue == nil {
		m.removedqueue = make(map[int]struct{})
	}
	for i := range ids {
		m.removedqueue[ids[i]] = struct{}{}
	}
}

// RemovedQueue returns the removed ids of queue.
func (m *PatientMutation) RemovedQueueIDs() (ids []int) {
	for id := range m.removedqueue {
		ids = append(ids, id)
	}
	return
}

// QueueIDs returns the queue ids in the mutation.
func (m *PatientMutation) QueueIDs() (ids []int) {
	for id := range m.queue {
		ids = append(ids, id)
	}
	return
}

// ResetQueue reset all changes of the "queue" edge.
func (m *PatientMutation) ResetQueue() {
	m.queue = nil
	m.removedqueue = nil
}

// AddAppointmentIDs adds the appointment edge to Appointment by ids.
func (m *PatientMutation) AddAppointmentIDs(ids ...int) {
	if m.appointment == nil {
		m.appointment = make(map[int]struct{})
	}
	for i := range ids {
		m.appointment[ids[i]] = struct{}{}
	}
}

// RemoveAppointmentIDs removes the appointment edge to Appointment by ids.
func (m *PatientMutation) RemoveAppointmentIDs(ids ...int) {
	if m.removedappointment == nil {
		m.removedappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedappointment[ids[i]] = struct{}{}
	}
}

// RemovedAppointment returns the removed ids of appointment.
func (m *PatientMutation) RemovedAppointmentIDs() (ids []int) {
	for id := range m.removedappointment {
		ids = append(ids, id)
	}
	return
}

// AppointmentIDs returns the appointment ids in the mutation.
func (m *PatientMutation) AppointmentIDs() (ids []int) {
	for id := range m.appointment {
		ids = append(ids, id)
	}
	return
}

// ResetAppointment reset all changes of the "appointment" edge.
func (m *PatientMutation) ResetAppointment() {
	m.appointment = nil
	m.removedappointment = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.patient_ID != nil {
		fields = append(fields, patient.FieldPatientID)
	}
	if m.name != nil {
		fields = append(fields, patient.FieldName)
	}
	if m.cardID != nil {
		fields = append(fields, patient.FieldCardID)
	}
	if m.tel != nil {
		fields = append(fields, patient.FieldTel)
	}
	if m.age != nil {
		fields = append(fields, patient.FieldAge)
	}
	if m.birthday != nil {
		fields = append(fields, patient.FieldBirthday)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientID:
		return m.PatientID()
	case patient.FieldName:
		return m.Name()
	case patient.FieldCardID:
		return m.CardID()
	case patient.FieldTel:
		return m.Tel()
	case patient.FieldAge:
		return m.Age()
	case patient.FieldBirthday:
		return m.Birthday()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientID:
		return m.OldPatientID(ctx)
	case patient.FieldName:
		return m.OldName(ctx)
	case patient.FieldCardID:
		return m.OldCardID(ctx)
	case patient.FieldTel:
		return m.OldTel(ctx)
	case patient.FieldAge:
		return m.OldAge(ctx)
	case patient.FieldBirthday:
		return m.OldBirthday(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientID(v)
		return nil
	case patient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case patient.FieldCardID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCardID(v)
		return nil
	case patient.FieldTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTel(v)
		return nil
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case patient.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, patient.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientID:
		m.ResetPatientID()
		return nil
	case patient.FieldName:
		m.ResetName()
		return nil
	case patient.FieldCardID:
		m.ResetCardID()
		return nil
	case patient.FieldTel:
		m.ResetTel()
		return nil
	case patient.FieldAge:
		m.ResetAge()
		return nil
	case patient.FieldBirthday:
		m.ResetBirthday()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.gender != nil {
		edges = append(edges, patient.EdgeGender)
	}
	if m.medicalcare != nil {
		edges = append(edges, patient.EdgeMedicalcare)
	}
	if m.nurse != nil {
		edges = append(edges, patient.EdgeNurse)
	}
	if m.disease != nil {
		edges = append(edges, patient.EdgeDisease)
	}
	if m.medicalfiles != nil {
		edges = append(edges, patient.EdgeMedicalfiles)
	}
	if m.queue != nil {
		edges = append(edges, patient.EdgeQueue)
	}
	if m.appointment != nil {
		edges = append(edges, patient.EdgeAppointment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeMedicalcare:
		if id := m.medicalcare; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeNurse:
		if id := m.nurse; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeDisease:
		if id := m.disease; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.medicalfiles))
		for id := range m.medicalfiles {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeQueue:
		ids := make([]ent.Value, 0, len(m.queue))
		for id := range m.queue {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.appointment))
		for id := range m.appointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedmedicalfiles != nil {
		edges = append(edges, patient.EdgeMedicalfiles)
	}
	if m.removedqueue != nil {
		edges = append(edges, patient.EdgeQueue)
	}
	if m.removedappointment != nil {
		edges = append(edges, patient.EdgeAppointment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeMedicalfiles:
		ids := make([]ent.Value, 0, len(m.removedmedicalfiles))
		for id := range m.removedmedicalfiles {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeQueue:
		ids := make([]ent.Value, 0, len(m.removedqueue))
		for id := range m.removedqueue {
			ids = append(ids, id)
		}
		return ids
	case patient.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.removedappointment))
		for id := range m.removedappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedgender {
		edges = append(edges, patient.EdgeGender)
	}
	if m.clearedmedicalcare {
		edges = append(edges, patient.EdgeMedicalcare)
	}
	if m.clearednurse {
		edges = append(edges, patient.EdgeNurse)
	}
	if m.cleareddisease {
		edges = append(edges, patient.EdgeDisease)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeGender:
		return m.clearedgender
	case patient.EdgeMedicalcare:
		return m.clearedmedicalcare
	case patient.EdgeNurse:
		return m.clearednurse
	case patient.EdgeDisease:
		return m.cleareddisease
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	case patient.EdgeGender:
		m.ClearGender()
		return nil
	case patient.EdgeMedicalcare:
		m.ClearMedicalcare()
		return nil
	case patient.EdgeNurse:
		m.ClearNurse()
		return nil
	case patient.EdgeDisease:
		m.ClearDisease()
		return nil
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeGender:
		m.ResetGender()
		return nil
	case patient.EdgeMedicalcare:
		m.ResetMedicalcare()
		return nil
	case patient.EdgeNurse:
		m.ResetNurse()
		return nil
	case patient.EdgeDisease:
		m.ResetDisease()
		return nil
	case patient.EdgeMedicalfiles:
		m.ResetMedicalfiles()
		return nil
	case patient.EdgeQueue:
		m.ResetQueue()
		return nil
	case patient.EdgeAppointment:
		m.ResetAppointment()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// PriceTypeMutation represents an operation that mutate the PriceTypes
// nodes in the graph.
type PriceTypeMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	clearedFields         map[string]struct{}
	dentalexpenses        map[int]struct{}
	removeddentalexpenses map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*PriceType, error)
}

var _ ent.Mutation = (*PriceTypeMutation)(nil)

// pricetypeOption allows to manage the mutation configuration using functional options.
type pricetypeOption func(*PriceTypeMutation)

// newPriceTypeMutation creates new mutation for $n.Name.
func newPriceTypeMutation(c config, op Op, opts ...pricetypeOption) *PriceTypeMutation {
	m := &PriceTypeMutation{
		config:        c,
		op:            op,
		typ:           TypePriceType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPriceTypeID sets the id field of the mutation.
func withPriceTypeID(id int) pricetypeOption {
	return func(m *PriceTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *PriceType
		)
		m.oldValue = func(ctx context.Context) (*PriceType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PriceType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPriceType sets the old PriceType of the mutation.
func withPriceType(node *PriceType) pricetypeOption {
	return func(m *PriceTypeMutation) {
		m.oldValue = func(context.Context) (*PriceType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PriceTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PriceTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PriceTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *PriceTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *PriceTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the PriceType.
// If the PriceType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PriceTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *PriceTypeMutation) ResetName() {
	m.name = nil
}

// AddDentalexpenseIDs adds the dentalexpenses edge to DentalExpense by ids.
func (m *PriceTypeMutation) AddDentalexpenseIDs(ids ...int) {
	if m.dentalexpenses == nil {
		m.dentalexpenses = make(map[int]struct{})
	}
	for i := range ids {
		m.dentalexpenses[ids[i]] = struct{}{}
	}
}

// RemoveDentalexpenseIDs removes the dentalexpenses edge to DentalExpense by ids.
func (m *PriceTypeMutation) RemoveDentalexpenseIDs(ids ...int) {
	if m.removeddentalexpenses == nil {
		m.removeddentalexpenses = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddentalexpenses[ids[i]] = struct{}{}
	}
}

// RemovedDentalexpenses returns the removed ids of dentalexpenses.
func (m *PriceTypeMutation) RemovedDentalexpensesIDs() (ids []int) {
	for id := range m.removeddentalexpenses {
		ids = append(ids, id)
	}
	return
}

// DentalexpensesIDs returns the dentalexpenses ids in the mutation.
func (m *PriceTypeMutation) DentalexpensesIDs() (ids []int) {
	for id := range m.dentalexpenses {
		ids = append(ids, id)
	}
	return
}

// ResetDentalexpenses reset all changes of the "dentalexpenses" edge.
func (m *PriceTypeMutation) ResetDentalexpenses() {
	m.dentalexpenses = nil
	m.removeddentalexpenses = nil
}

// Op returns the operation name.
func (m *PriceTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PriceType).
func (m *PriceTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PriceTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, pricetype.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PriceTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pricetype.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PriceTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pricetype.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown PriceType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PriceTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pricetype.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown PriceType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PriceTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PriceTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PriceTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PriceType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PriceTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PriceTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PriceTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PriceType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PriceTypeMutation) ResetField(name string) error {
	switch name {
	case pricetype.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown PriceType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PriceTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dentalexpenses != nil {
		edges = append(edges, pricetype.EdgeDentalexpenses)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PriceTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pricetype.EdgeDentalexpenses:
		ids := make([]ent.Value, 0, len(m.dentalexpenses))
		for id := range m.dentalexpenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PriceTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddentalexpenses != nil {
		edges = append(edges, pricetype.EdgeDentalexpenses)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PriceTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pricetype.EdgeDentalexpenses:
		ids := make([]ent.Value, 0, len(m.removeddentalexpenses))
		for id := range m.removeddentalexpenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PriceTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PriceTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PriceTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PriceType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PriceTypeMutation) ResetEdge(name string) error {
	switch name {
	case pricetype.EdgeDentalexpenses:
		m.ResetDentalexpenses()
		return nil
	}
	return fmt.Errorf("unknown PriceType edge %s", name)
}

// QueueMutation represents an operation that mutate the Queues
// nodes in the graph.
type QueueMutation struct {
	config
	op             Op
	typ            string
	id             *int
	dental         *string
	queue_time     *time.Time
	clearedFields  map[string]struct{}
	dentist        *int
	cleareddentist bool
	nurse          *int
	clearednurse   bool
	patient        *int
	clearedpatient bool
	done           bool
	oldValue       func(context.Context) (*Queue, error)
}

var _ ent.Mutation = (*QueueMutation)(nil)

// queueOption allows to manage the mutation configuration using functional options.
type queueOption func(*QueueMutation)

// newQueueMutation creates new mutation for $n.Name.
func newQueueMutation(c config, op Op, opts ...queueOption) *QueueMutation {
	m := &QueueMutation{
		config:        c,
		op:            op,
		typ:           TypeQueue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQueueID sets the id field of the mutation.
func withQueueID(id int) queueOption {
	return func(m *QueueMutation) {
		var (
			err   error
			once  sync.Once
			value *Queue
		)
		m.oldValue = func(ctx context.Context) (*Queue, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Queue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQueue sets the old Queue of the mutation.
func withQueue(node *Queue) queueOption {
	return func(m *QueueMutation) {
		m.oldValue = func(context.Context) (*Queue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QueueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QueueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *QueueMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDental sets the dental field.
func (m *QueueMutation) SetDental(s string) {
	m.dental = &s
}

// Dental returns the dental value in the mutation.
func (m *QueueMutation) Dental() (r string, exists bool) {
	v := m.dental
	if v == nil {
		return
	}
	return *v, true
}

// OldDental returns the old dental value of the Queue.
// If the Queue object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QueueMutation) OldDental(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDental is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDental requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDental: %w", err)
	}
	return oldValue.Dental, nil
}

// ResetDental reset all changes of the "dental" field.
func (m *QueueMutation) ResetDental() {
	m.dental = nil
}

// SetQueueTime sets the queue_time field.
func (m *QueueMutation) SetQueueTime(t time.Time) {
	m.queue_time = &t
}

// QueueTime returns the queue_time value in the mutation.
func (m *QueueMutation) QueueTime() (r time.Time, exists bool) {
	v := m.queue_time
	if v == nil {
		return
	}
	return *v, true
}

// OldQueueTime returns the old queue_time value of the Queue.
// If the Queue object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *QueueMutation) OldQueueTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQueueTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQueueTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQueueTime: %w", err)
	}
	return oldValue.QueueTime, nil
}

// ResetQueueTime reset all changes of the "queue_time" field.
func (m *QueueMutation) ResetQueueTime() {
	m.queue_time = nil
}

// SetDentistID sets the dentist edge to Dentist by id.
func (m *QueueMutation) SetDentistID(id int) {
	m.dentist = &id
}

// ClearDentist clears the dentist edge to Dentist.
func (m *QueueMutation) ClearDentist() {
	m.cleareddentist = true
}

// DentistCleared returns if the edge dentist was cleared.
func (m *QueueMutation) DentistCleared() bool {
	return m.cleareddentist
}

// DentistID returns the dentist id in the mutation.
func (m *QueueMutation) DentistID() (id int, exists bool) {
	if m.dentist != nil {
		return *m.dentist, true
	}
	return
}

// DentistIDs returns the dentist ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DentistID instead. It exists only for internal usage by the builders.
func (m *QueueMutation) DentistIDs() (ids []int) {
	if id := m.dentist; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDentist reset all changes of the "dentist" edge.
func (m *QueueMutation) ResetDentist() {
	m.dentist = nil
	m.cleareddentist = false
}

// SetNurseID sets the nurse edge to Nurse by id.
func (m *QueueMutation) SetNurseID(id int) {
	m.nurse = &id
}

// ClearNurse clears the nurse edge to Nurse.
func (m *QueueMutation) ClearNurse() {
	m.clearednurse = true
}

// NurseCleared returns if the edge nurse was cleared.
func (m *QueueMutation) NurseCleared() bool {
	return m.clearednurse
}

// NurseID returns the nurse id in the mutation.
func (m *QueueMutation) NurseID() (id int, exists bool) {
	if m.nurse != nil {
		return *m.nurse, true
	}
	return
}

// NurseIDs returns the nurse ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NurseID instead. It exists only for internal usage by the builders.
func (m *QueueMutation) NurseIDs() (ids []int) {
	if id := m.nurse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNurse reset all changes of the "nurse" edge.
func (m *QueueMutation) ResetNurse() {
	m.nurse = nil
	m.clearednurse = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *QueueMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *QueueMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *QueueMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *QueueMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *QueueMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *QueueMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// Op returns the operation name.
func (m *QueueMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Queue).
func (m *QueueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *QueueMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.dental != nil {
		fields = append(fields, queue.FieldDental)
	}
	if m.queue_time != nil {
		fields = append(fields, queue.FieldQueueTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *QueueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case queue.FieldDental:
		return m.Dental()
	case queue.FieldQueueTime:
		return m.QueueTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *QueueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case queue.FieldDental:
		return m.OldDental(ctx)
	case queue.FieldQueueTime:
		return m.OldQueueTime(ctx)
	}
	return nil, fmt.Errorf("unknown Queue field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *QueueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case queue.FieldDental:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDental(v)
		return nil
	case queue.FieldQueueTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQueueTime(v)
		return nil
	}
	return fmt.Errorf("unknown Queue field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *QueueMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *QueueMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *QueueMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Queue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *QueueMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *QueueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *QueueMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Queue nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *QueueMutation) ResetField(name string) error {
	switch name {
	case queue.FieldDental:
		m.ResetDental()
		return nil
	case queue.FieldQueueTime:
		m.ResetQueueTime()
		return nil
	}
	return fmt.Errorf("unknown Queue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *QueueMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.dentist != nil {
		edges = append(edges, queue.EdgeDentist)
	}
	if m.nurse != nil {
		edges = append(edges, queue.EdgeNurse)
	}
	if m.patient != nil {
		edges = append(edges, queue.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *QueueMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case queue.EdgeDentist:
		if id := m.dentist; id != nil {
			return []ent.Value{*id}
		}
	case queue.EdgeNurse:
		if id := m.nurse; id != nil {
			return []ent.Value{*id}
		}
	case queue.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *QueueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *QueueMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *QueueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddentist {
		edges = append(edges, queue.EdgeDentist)
	}
	if m.clearednurse {
		edges = append(edges, queue.EdgeNurse)
	}
	if m.clearedpatient {
		edges = append(edges, queue.EdgePatient)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *QueueMutation) EdgeCleared(name string) bool {
	switch name {
	case queue.EdgeDentist:
		return m.cleareddentist
	case queue.EdgeNurse:
		return m.clearednurse
	case queue.EdgePatient:
		return m.clearedpatient
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *QueueMutation) ClearEdge(name string) error {
	switch name {
	case queue.EdgeDentist:
		m.ClearDentist()
		return nil
	case queue.EdgeNurse:
		m.ClearNurse()
		return nil
	case queue.EdgePatient:
		m.ClearPatient()
		return nil
	}
	return fmt.Errorf("unknown Queue unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *QueueMutation) ResetEdge(name string) error {
	switch name {
	case queue.EdgeDentist:
		m.ResetDentist()
		return nil
	case queue.EdgeNurse:
		m.ResetNurse()
		return nil
	case queue.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Queue edge %s", name)
}

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	clearedFields      map[string]struct{}
	appointment        map[int]struct{}
	removedappointment map[int]struct{}
	done               bool
	oldValue           func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *RoomMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *RoomMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Room.
// If the Room object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *RoomMutation) ResetName() {
	m.name = nil
}

// AddAppointmentIDs adds the appointment edge to Appointment by ids.
func (m *RoomMutation) AddAppointmentIDs(ids ...int) {
	if m.appointment == nil {
		m.appointment = make(map[int]struct{})
	}
	for i := range ids {
		m.appointment[ids[i]] = struct{}{}
	}
}

// RemoveAppointmentIDs removes the appointment edge to Appointment by ids.
func (m *RoomMutation) RemoveAppointmentIDs(ids ...int) {
	if m.removedappointment == nil {
		m.removedappointment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedappointment[ids[i]] = struct{}{}
	}
}

// RemovedAppointment returns the removed ids of appointment.
func (m *RoomMutation) RemovedAppointmentIDs() (ids []int) {
	for id := range m.removedappointment {
		ids = append(ids, id)
	}
	return
}

// AppointmentIDs returns the appointment ids in the mutation.
func (m *RoomMutation) AppointmentIDs() (ids []int) {
	for id := range m.appointment {
		ids = append(ids, id)
	}
	return
}

// ResetAppointment reset all changes of the "appointment" edge.
func (m *RoomMutation) ResetAppointment() {
	m.appointment = nil
	m.removedappointment = nil
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, room.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.appointment != nil {
		edges = append(edges, room.EdgeAppointment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.appointment))
		for id := range m.appointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedappointment != nil {
		edges = append(edges, room.EdgeAppointment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeAppointment:
		ids := make([]ent.Value, 0, len(m.removedappointment))
		for id := range m.removedappointment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeAppointment:
		m.ResetAppointment()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}
