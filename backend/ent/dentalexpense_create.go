// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/dentalexpense"
	"github.com/tanapon395/playlist-video/ent/medicalfile"
	"github.com/tanapon395/playlist-video/ent/nurse"
	"github.com/tanapon395/playlist-video/ent/pricetype"
)

// DentalExpenseCreate is the builder for creating a DentalExpense entity.
type DentalExpenseCreate struct {
	config
	mutation *DentalExpenseMutation
	hooks    []Hook
}

// SetAddedTime sets the added_time field.
func (dec *DentalExpenseCreate) SetAddedTime(t time.Time) *DentalExpenseCreate {
	dec.mutation.SetAddedTime(t)
	return dec
}

// SetNurseID sets the nurse edge to Nurse by id.
func (dec *DentalExpenseCreate) SetNurseID(id int) *DentalExpenseCreate {
	dec.mutation.SetNurseID(id)
	return dec
}

// SetNillableNurseID sets the nurse edge to Nurse by id if the given value is not nil.
func (dec *DentalExpenseCreate) SetNillableNurseID(id *int) *DentalExpenseCreate {
	if id != nil {
		dec = dec.SetNurseID(*id)
	}
	return dec
}

// SetNurse sets the nurse edge to Nurse.
func (dec *DentalExpenseCreate) SetNurse(n *Nurse) *DentalExpenseCreate {
	return dec.SetNurseID(n.ID)
}

// SetMedicalfileID sets the medicalfile edge to Medicalfile by id.
func (dec *DentalExpenseCreate) SetMedicalfileID(id int) *DentalExpenseCreate {
	dec.mutation.SetMedicalfileID(id)
	return dec
}

// SetNillableMedicalfileID sets the medicalfile edge to Medicalfile by id if the given value is not nil.
func (dec *DentalExpenseCreate) SetNillableMedicalfileID(id *int) *DentalExpenseCreate {
	if id != nil {
		dec = dec.SetMedicalfileID(*id)
	}
	return dec
}

// SetMedicalfile sets the medicalfile edge to Medicalfile.
func (dec *DentalExpenseCreate) SetMedicalfile(m *Medicalfile) *DentalExpenseCreate {
	return dec.SetMedicalfileID(m.ID)
}

// SetPricetypeID sets the pricetype edge to PriceType by id.
func (dec *DentalExpenseCreate) SetPricetypeID(id int) *DentalExpenseCreate {
	dec.mutation.SetPricetypeID(id)
	return dec
}

// SetNillablePricetypeID sets the pricetype edge to PriceType by id if the given value is not nil.
func (dec *DentalExpenseCreate) SetNillablePricetypeID(id *int) *DentalExpenseCreate {
	if id != nil {
		dec = dec.SetPricetypeID(*id)
	}
	return dec
}

// SetPricetype sets the pricetype edge to PriceType.
func (dec *DentalExpenseCreate) SetPricetype(p *PriceType) *DentalExpenseCreate {
	return dec.SetPricetypeID(p.ID)
}

// Mutation returns the DentalExpenseMutation object of the builder.
func (dec *DentalExpenseCreate) Mutation() *DentalExpenseMutation {
	return dec.mutation
}

// Save creates the DentalExpense in the database.
func (dec *DentalExpenseCreate) Save(ctx context.Context) (*DentalExpense, error) {
	if _, ok := dec.mutation.AddedTime(); !ok {
		return nil, &ValidationError{Name: "added_time", err: errors.New("ent: missing required field \"added_time\"")}
	}
	var (
		err  error
		node *DentalExpense
	)
	if len(dec.hooks) == 0 {
		node, err = dec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentalExpenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dec.mutation = mutation
			node, err = dec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dec.hooks) - 1; i >= 0; i-- {
			mut = dec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dec *DentalExpenseCreate) SaveX(ctx context.Context) *DentalExpense {
	v, err := dec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dec *DentalExpenseCreate) sqlSave(ctx context.Context) (*DentalExpense, error) {
	de, _spec := dec.createSpec()
	if err := sqlgraph.CreateNode(ctx, dec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	de.ID = int(id)
	return de, nil
}

func (dec *DentalExpenseCreate) createSpec() (*DentalExpense, *sqlgraph.CreateSpec) {
	var (
		de    = &DentalExpense{config: dec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dentalexpense.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentalexpense.FieldID,
			},
		}
	)
	if value, ok := dec.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dentalexpense.FieldAddedTime,
		})
		de.AddedTime = value
	}
	if nodes := dec.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.NurseTable,
			Columns: []string{dentalexpense.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dec.mutation.MedicalfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.MedicalfileTable,
			Columns: []string{dentalexpense.MedicalfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dec.mutation.PricetypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentalexpense.PricetypeTable,
			Columns: []string{dentalexpense.PricetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pricetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return de, _spec
}
