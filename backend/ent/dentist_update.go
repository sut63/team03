// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team03/app/ent/appointment"
	"github.com/team03/app/ent/degree"
	"github.com/team03/app/ent/dentist"
	"github.com/team03/app/ent/expert"
	"github.com/team03/app/ent/gender"
	"github.com/team03/app/ent/medicalfile"
	"github.com/team03/app/ent/nurse"
	"github.com/team03/app/ent/predicate"
	"github.com/team03/app/ent/queue"
)

// DentistUpdate is the builder for updating Dentist entities.
type DentistUpdate struct {
	config
	hooks      []Hook
	mutation   *DentistMutation
	predicates []predicate.Dentist
}

// Where adds a new predicate for the builder.
func (du *DentistUpdate) Where(ps ...predicate.Dentist) *DentistUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetName sets the name field.
func (du *DentistUpdate) SetName(s string) *DentistUpdate {
	du.mutation.SetName(s)
	return du
}

// SetAge sets the age field.
func (du *DentistUpdate) SetAge(i int) *DentistUpdate {
	du.mutation.ResetAge()
	du.mutation.SetAge(i)
	return du
}

// AddAge adds i to age.
func (du *DentistUpdate) AddAge(i int) *DentistUpdate {
	du.mutation.AddAge(i)
	return du
}

// SetCardid sets the cardid field.
func (du *DentistUpdate) SetCardid(s string) *DentistUpdate {
	du.mutation.SetCardid(s)
	return du
}

// SetBirthday sets the birthday field.
func (du *DentistUpdate) SetBirthday(t time.Time) *DentistUpdate {
	du.mutation.SetBirthday(t)
	return du
}

// SetExperience sets the experience field.
func (du *DentistUpdate) SetExperience(s string) *DentistUpdate {
	du.mutation.SetExperience(s)
	return du
}

// SetTel sets the tel field.
func (du *DentistUpdate) SetTel(s string) *DentistUpdate {
	du.mutation.SetTel(s)
	return du
}

// SetEmail sets the email field.
func (du *DentistUpdate) SetEmail(s string) *DentistUpdate {
	du.mutation.SetEmail(s)
	return du
}

// SetPassword sets the password field.
func (du *DentistUpdate) SetPassword(s string) *DentistUpdate {
	du.mutation.SetPassword(s)
	return du
}

// SetNurseID sets the nurse edge to Nurse by id.
func (du *DentistUpdate) SetNurseID(id int) *DentistUpdate {
	du.mutation.SetNurseID(id)
	return du
}

// SetNillableNurseID sets the nurse edge to Nurse by id if the given value is not nil.
func (du *DentistUpdate) SetNillableNurseID(id *int) *DentistUpdate {
	if id != nil {
		du = du.SetNurseID(*id)
	}
	return du
}

// SetNurse sets the nurse edge to Nurse.
func (du *DentistUpdate) SetNurse(n *Nurse) *DentistUpdate {
	return du.SetNurseID(n.ID)
}

// SetDegreeID sets the degree edge to Degree by id.
func (du *DentistUpdate) SetDegreeID(id int) *DentistUpdate {
	du.mutation.SetDegreeID(id)
	return du
}

// SetNillableDegreeID sets the degree edge to Degree by id if the given value is not nil.
func (du *DentistUpdate) SetNillableDegreeID(id *int) *DentistUpdate {
	if id != nil {
		du = du.SetDegreeID(*id)
	}
	return du
}

// SetDegree sets the degree edge to Degree.
func (du *DentistUpdate) SetDegree(d *Degree) *DentistUpdate {
	return du.SetDegreeID(d.ID)
}

// SetExpertID sets the expert edge to Expert by id.
func (du *DentistUpdate) SetExpertID(id int) *DentistUpdate {
	du.mutation.SetExpertID(id)
	return du
}

// SetNillableExpertID sets the expert edge to Expert by id if the given value is not nil.
func (du *DentistUpdate) SetNillableExpertID(id *int) *DentistUpdate {
	if id != nil {
		du = du.SetExpertID(*id)
	}
	return du
}

// SetExpert sets the expert edge to Expert.
func (du *DentistUpdate) SetExpert(e *Expert) *DentistUpdate {
	return du.SetExpertID(e.ID)
}

// SetGenderID sets the gender edge to Gender by id.
func (du *DentistUpdate) SetGenderID(id int) *DentistUpdate {
	du.mutation.SetGenderID(id)
	return du
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (du *DentistUpdate) SetNillableGenderID(id *int) *DentistUpdate {
	if id != nil {
		du = du.SetGenderID(*id)
	}
	return du
}

// SetGender sets the gender edge to Gender.
func (du *DentistUpdate) SetGender(g *Gender) *DentistUpdate {
	return du.SetGenderID(g.ID)
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (du *DentistUpdate) AddMedicalfileIDs(ids ...int) *DentistUpdate {
	du.mutation.AddMedicalfileIDs(ids...)
	return du
}

// AddMedicalfiles adds the medicalfiles edges to Medicalfile.
func (du *DentistUpdate) AddMedicalfiles(m ...*Medicalfile) *DentistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.AddMedicalfileIDs(ids...)
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (du *DentistUpdate) AddQueueIDs(ids ...int) *DentistUpdate {
	du.mutation.AddQueueIDs(ids...)
	return du
}

// AddQueue adds the queue edges to Queue.
func (du *DentistUpdate) AddQueue(q ...*Queue) *DentistUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return du.AddQueueIDs(ids...)
}

// AddAppointmentIDs adds the appointment edge to Appointment by ids.
func (du *DentistUpdate) AddAppointmentIDs(ids ...int) *DentistUpdate {
	du.mutation.AddAppointmentIDs(ids...)
	return du
}

// AddAppointment adds the appointment edges to Appointment.
func (du *DentistUpdate) AddAppointment(a ...*Appointment) *DentistUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.AddAppointmentIDs(ids...)
}

// Mutation returns the DentistMutation object of the builder.
func (du *DentistUpdate) Mutation() *DentistMutation {
	return du.mutation
}

// ClearNurse clears the nurse edge to Nurse.
func (du *DentistUpdate) ClearNurse() *DentistUpdate {
	du.mutation.ClearNurse()
	return du
}

// ClearDegree clears the degree edge to Degree.
func (du *DentistUpdate) ClearDegree() *DentistUpdate {
	du.mutation.ClearDegree()
	return du
}

// ClearExpert clears the expert edge to Expert.
func (du *DentistUpdate) ClearExpert() *DentistUpdate {
	du.mutation.ClearExpert()
	return du
}

// ClearGender clears the gender edge to Gender.
func (du *DentistUpdate) ClearGender() *DentistUpdate {
	du.mutation.ClearGender()
	return du
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (du *DentistUpdate) RemoveMedicalfileIDs(ids ...int) *DentistUpdate {
	du.mutation.RemoveMedicalfileIDs(ids...)
	return du
}

// RemoveMedicalfiles removes medicalfiles edges to Medicalfile.
func (du *DentistUpdate) RemoveMedicalfiles(m ...*Medicalfile) *DentistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.RemoveMedicalfileIDs(ids...)
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (du *DentistUpdate) RemoveQueueIDs(ids ...int) *DentistUpdate {
	du.mutation.RemoveQueueIDs(ids...)
	return du
}

// RemoveQueue removes queue edges to Queue.
func (du *DentistUpdate) RemoveQueue(q ...*Queue) *DentistUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return du.RemoveQueueIDs(ids...)
}

// RemoveAppointmentIDs removes the appointment edge to Appointment by ids.
func (du *DentistUpdate) RemoveAppointmentIDs(ids ...int) *DentistUpdate {
	du.mutation.RemoveAppointmentIDs(ids...)
	return du
}

// RemoveAppointment removes appointment edges to Appointment.
func (du *DentistUpdate) RemoveAppointment(a ...*Appointment) *DentistUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.RemoveAppointmentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DentistUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.Name(); ok {
		if err := dentist.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := du.mutation.Age(); ok {
		if err := dentist.AgeValidator(v); err != nil {
			return 0, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := du.mutation.Cardid(); ok {
		if err := dentist.CardidValidator(v); err != nil {
			return 0, &ValidationError{Name: "cardid", err: fmt.Errorf("ent: validator failed for field \"cardid\": %w", err)}
		}
	}
	if v, ok := du.mutation.Experience(); ok {
		if err := dentist.ExperienceValidator(v); err != nil {
			return 0, &ValidationError{Name: "experience", err: fmt.Errorf("ent: validator failed for field \"experience\": %w", err)}
		}
	}
	if v, ok := du.mutation.Tel(); ok {
		if err := dentist.TelValidator(v); err != nil {
			return 0, &ValidationError{Name: "tel", err: fmt.Errorf("ent: validator failed for field \"tel\": %w", err)}
		}
	}
	if v, ok := du.mutation.Email(); ok {
		if err := dentist.EmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := du.mutation.Password(); ok {
		if err := dentist.PasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DentistUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DentistUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DentistUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DentistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentist.Table,
			Columns: dentist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentist.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldName,
		})
	}
	if value, ok := du.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentist.FieldAge,
		})
	}
	if value, ok := du.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentist.FieldAge,
		})
	}
	if value, ok := du.mutation.Cardid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldCardid,
		})
	}
	if value, ok := du.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dentist.FieldBirthday,
		})
	}
	if value, ok := du.mutation.Experience(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldExperience,
		})
	}
	if value, ok := du.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldTel,
		})
	}
	if value, ok := du.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldEmail,
		})
	}
	if value, ok := du.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldPassword,
		})
	}
	if du.mutation.NurseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.NurseTable,
			Columns: []string{dentist.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.NurseTable,
			Columns: []string{dentist.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DegreeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.DegreeTable,
			Columns: []string{dentist.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DegreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.DegreeTable,
			Columns: []string{dentist.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ExpertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.ExpertTable,
			Columns: []string{dentist.ExpertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: expert.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ExpertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.ExpertTable,
			Columns: []string{dentist.ExpertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: expert.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.GenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.GenderTable,
			Columns: []string{dentist.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.GenderTable,
			Columns: []string{dentist.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedMedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.MedicalfilesTable,
			Columns: []string{dentist.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.MedicalfilesTable,
			Columns: []string{dentist.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedQueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.QueueTable,
			Columns: []string{dentist.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.QueueTable,
			Columns: []string{dentist.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedAppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.AppointmentTable,
			Columns: []string{dentist.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.AppointmentTable,
			Columns: []string{dentist.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dentist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DentistUpdateOne is the builder for updating a single Dentist entity.
type DentistUpdateOne struct {
	config
	hooks    []Hook
	mutation *DentistMutation
}

// SetName sets the name field.
func (duo *DentistUpdateOne) SetName(s string) *DentistUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetAge sets the age field.
func (duo *DentistUpdateOne) SetAge(i int) *DentistUpdateOne {
	duo.mutation.ResetAge()
	duo.mutation.SetAge(i)
	return duo
}

// AddAge adds i to age.
func (duo *DentistUpdateOne) AddAge(i int) *DentistUpdateOne {
	duo.mutation.AddAge(i)
	return duo
}

// SetCardid sets the cardid field.
func (duo *DentistUpdateOne) SetCardid(s string) *DentistUpdateOne {
	duo.mutation.SetCardid(s)
	return duo
}

// SetBirthday sets the birthday field.
func (duo *DentistUpdateOne) SetBirthday(t time.Time) *DentistUpdateOne {
	duo.mutation.SetBirthday(t)
	return duo
}

// SetExperience sets the experience field.
func (duo *DentistUpdateOne) SetExperience(s string) *DentistUpdateOne {
	duo.mutation.SetExperience(s)
	return duo
}

// SetTel sets the tel field.
func (duo *DentistUpdateOne) SetTel(s string) *DentistUpdateOne {
	duo.mutation.SetTel(s)
	return duo
}

// SetEmail sets the email field.
func (duo *DentistUpdateOne) SetEmail(s string) *DentistUpdateOne {
	duo.mutation.SetEmail(s)
	return duo
}

// SetPassword sets the password field.
func (duo *DentistUpdateOne) SetPassword(s string) *DentistUpdateOne {
	duo.mutation.SetPassword(s)
	return duo
}

// SetNurseID sets the nurse edge to Nurse by id.
func (duo *DentistUpdateOne) SetNurseID(id int) *DentistUpdateOne {
	duo.mutation.SetNurseID(id)
	return duo
}

// SetNillableNurseID sets the nurse edge to Nurse by id if the given value is not nil.
func (duo *DentistUpdateOne) SetNillableNurseID(id *int) *DentistUpdateOne {
	if id != nil {
		duo = duo.SetNurseID(*id)
	}
	return duo
}

// SetNurse sets the nurse edge to Nurse.
func (duo *DentistUpdateOne) SetNurse(n *Nurse) *DentistUpdateOne {
	return duo.SetNurseID(n.ID)
}

// SetDegreeID sets the degree edge to Degree by id.
func (duo *DentistUpdateOne) SetDegreeID(id int) *DentistUpdateOne {
	duo.mutation.SetDegreeID(id)
	return duo
}

// SetNillableDegreeID sets the degree edge to Degree by id if the given value is not nil.
func (duo *DentistUpdateOne) SetNillableDegreeID(id *int) *DentistUpdateOne {
	if id != nil {
		duo = duo.SetDegreeID(*id)
	}
	return duo
}

// SetDegree sets the degree edge to Degree.
func (duo *DentistUpdateOne) SetDegree(d *Degree) *DentistUpdateOne {
	return duo.SetDegreeID(d.ID)
}

// SetExpertID sets the expert edge to Expert by id.
func (duo *DentistUpdateOne) SetExpertID(id int) *DentistUpdateOne {
	duo.mutation.SetExpertID(id)
	return duo
}

// SetNillableExpertID sets the expert edge to Expert by id if the given value is not nil.
func (duo *DentistUpdateOne) SetNillableExpertID(id *int) *DentistUpdateOne {
	if id != nil {
		duo = duo.SetExpertID(*id)
	}
	return duo
}

// SetExpert sets the expert edge to Expert.
func (duo *DentistUpdateOne) SetExpert(e *Expert) *DentistUpdateOne {
	return duo.SetExpertID(e.ID)
}

// SetGenderID sets the gender edge to Gender by id.
func (duo *DentistUpdateOne) SetGenderID(id int) *DentistUpdateOne {
	duo.mutation.SetGenderID(id)
	return duo
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (duo *DentistUpdateOne) SetNillableGenderID(id *int) *DentistUpdateOne {
	if id != nil {
		duo = duo.SetGenderID(*id)
	}
	return duo
}

// SetGender sets the gender edge to Gender.
func (duo *DentistUpdateOne) SetGender(g *Gender) *DentistUpdateOne {
	return duo.SetGenderID(g.ID)
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (duo *DentistUpdateOne) AddMedicalfileIDs(ids ...int) *DentistUpdateOne {
	duo.mutation.AddMedicalfileIDs(ids...)
	return duo
}

// AddMedicalfiles adds the medicalfiles edges to Medicalfile.
func (duo *DentistUpdateOne) AddMedicalfiles(m ...*Medicalfile) *DentistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.AddMedicalfileIDs(ids...)
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (duo *DentistUpdateOne) AddQueueIDs(ids ...int) *DentistUpdateOne {
	duo.mutation.AddQueueIDs(ids...)
	return duo
}

// AddQueue adds the queue edges to Queue.
func (duo *DentistUpdateOne) AddQueue(q ...*Queue) *DentistUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return duo.AddQueueIDs(ids...)
}

// AddAppointmentIDs adds the appointment edge to Appointment by ids.
func (duo *DentistUpdateOne) AddAppointmentIDs(ids ...int) *DentistUpdateOne {
	duo.mutation.AddAppointmentIDs(ids...)
	return duo
}

// AddAppointment adds the appointment edges to Appointment.
func (duo *DentistUpdateOne) AddAppointment(a ...*Appointment) *DentistUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.AddAppointmentIDs(ids...)
}

// Mutation returns the DentistMutation object of the builder.
func (duo *DentistUpdateOne) Mutation() *DentistMutation {
	return duo.mutation
}

// ClearNurse clears the nurse edge to Nurse.
func (duo *DentistUpdateOne) ClearNurse() *DentistUpdateOne {
	duo.mutation.ClearNurse()
	return duo
}

// ClearDegree clears the degree edge to Degree.
func (duo *DentistUpdateOne) ClearDegree() *DentistUpdateOne {
	duo.mutation.ClearDegree()
	return duo
}

// ClearExpert clears the expert edge to Expert.
func (duo *DentistUpdateOne) ClearExpert() *DentistUpdateOne {
	duo.mutation.ClearExpert()
	return duo
}

// ClearGender clears the gender edge to Gender.
func (duo *DentistUpdateOne) ClearGender() *DentistUpdateOne {
	duo.mutation.ClearGender()
	return duo
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (duo *DentistUpdateOne) RemoveMedicalfileIDs(ids ...int) *DentistUpdateOne {
	duo.mutation.RemoveMedicalfileIDs(ids...)
	return duo
}

// RemoveMedicalfiles removes medicalfiles edges to Medicalfile.
func (duo *DentistUpdateOne) RemoveMedicalfiles(m ...*Medicalfile) *DentistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.RemoveMedicalfileIDs(ids...)
}

// RemoveQueueIDs removes the queue edge to Queue by ids.
func (duo *DentistUpdateOne) RemoveQueueIDs(ids ...int) *DentistUpdateOne {
	duo.mutation.RemoveQueueIDs(ids...)
	return duo
}

// RemoveQueue removes queue edges to Queue.
func (duo *DentistUpdateOne) RemoveQueue(q ...*Queue) *DentistUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return duo.RemoveQueueIDs(ids...)
}

// RemoveAppointmentIDs removes the appointment edge to Appointment by ids.
func (duo *DentistUpdateOne) RemoveAppointmentIDs(ids ...int) *DentistUpdateOne {
	duo.mutation.RemoveAppointmentIDs(ids...)
	return duo
}

// RemoveAppointment removes appointment edges to Appointment.
func (duo *DentistUpdateOne) RemoveAppointment(a ...*Appointment) *DentistUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.RemoveAppointmentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (duo *DentistUpdateOne) Save(ctx context.Context) (*Dentist, error) {
	if v, ok := duo.mutation.Name(); ok {
		if err := dentist.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Age(); ok {
		if err := dentist.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Cardid(); ok {
		if err := dentist.CardidValidator(v); err != nil {
			return nil, &ValidationError{Name: "cardid", err: fmt.Errorf("ent: validator failed for field \"cardid\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Experience(); ok {
		if err := dentist.ExperienceValidator(v); err != nil {
			return nil, &ValidationError{Name: "experience", err: fmt.Errorf("ent: validator failed for field \"experience\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Tel(); ok {
		if err := dentist.TelValidator(v); err != nil {
			return nil, &ValidationError{Name: "tel", err: fmt.Errorf("ent: validator failed for field \"tel\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Email(); ok {
		if err := dentist.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Password(); ok {
		if err := dentist.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}

	var (
		err  error
		node *Dentist
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DentistUpdateOne) SaveX(ctx context.Context) *Dentist {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DentistUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DentistUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DentistUpdateOne) sqlSave(ctx context.Context) (d *Dentist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dentist.Table,
			Columns: dentist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentist.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Dentist.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldName,
		})
	}
	if value, ok := duo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentist.FieldAge,
		})
	}
	if value, ok := duo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentist.FieldAge,
		})
	}
	if value, ok := duo.mutation.Cardid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldCardid,
		})
	}
	if value, ok := duo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dentist.FieldBirthday,
		})
	}
	if value, ok := duo.mutation.Experience(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldExperience,
		})
	}
	if value, ok := duo.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldTel,
		})
	}
	if value, ok := duo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldEmail,
		})
	}
	if value, ok := duo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldPassword,
		})
	}
	if duo.mutation.NurseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.NurseTable,
			Columns: []string{dentist.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.NurseTable,
			Columns: []string{dentist.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DegreeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.DegreeTable,
			Columns: []string{dentist.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DegreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.DegreeTable,
			Columns: []string{dentist.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ExpertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.ExpertTable,
			Columns: []string{dentist.ExpertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: expert.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ExpertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.ExpertTable,
			Columns: []string{dentist.ExpertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: expert.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.GenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.GenderTable,
			Columns: []string{dentist.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.GenderTable,
			Columns: []string{dentist.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedMedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.MedicalfilesTable,
			Columns: []string{dentist.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.MedicalfilesTable,
			Columns: []string{dentist.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedQueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.QueueTable,
			Columns: []string{dentist.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.QueueTable,
			Columns: []string{dentist.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedAppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.AppointmentTable,
			Columns: []string{dentist.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.AppointmentTable,
			Columns: []string{dentist.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Dentist{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dentist.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
