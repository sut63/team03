// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team03/app/ent/medicalcare"
	"github.com/team03/app/ent/medicalfile"
	"github.com/team03/app/ent/patient"
	"github.com/team03/app/ent/predicate"
)

// MedicalCareUpdate is the builder for updating MedicalCare entities.
type MedicalCareUpdate struct {
	config
	hooks      []Hook
	mutation   *MedicalCareMutation
	predicates []predicate.MedicalCare
}

// Where adds a new predicate for the builder.
func (mcu *MedicalCareUpdate) Where(ps ...predicate.MedicalCare) *MedicalCareUpdate {
	mcu.predicates = append(mcu.predicates, ps...)
	return mcu
}

// SetName sets the name field.
func (mcu *MedicalCareUpdate) SetName(s string) *MedicalCareUpdate {
	mcu.mutation.SetName(s)
	return mcu
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (mcu *MedicalCareUpdate) AddPatientIDs(ids ...int) *MedicalCareUpdate {
	mcu.mutation.AddPatientIDs(ids...)
	return mcu
}

// AddPatients adds the patients edges to Patient.
func (mcu *MedicalCareUpdate) AddPatients(p ...*Patient) *MedicalCareUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mcu.AddPatientIDs(ids...)
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (mcu *MedicalCareUpdate) AddMedicalfileIDs(ids ...int) *MedicalCareUpdate {
	mcu.mutation.AddMedicalfileIDs(ids...)
	return mcu
}

// AddMedicalfiles adds the medicalfiles edges to Medicalfile.
func (mcu *MedicalCareUpdate) AddMedicalfiles(m ...*Medicalfile) *MedicalCareUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcu.AddMedicalfileIDs(ids...)
}

// Mutation returns the MedicalCareMutation object of the builder.
func (mcu *MedicalCareUpdate) Mutation() *MedicalCareMutation {
	return mcu.mutation
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (mcu *MedicalCareUpdate) RemovePatientIDs(ids ...int) *MedicalCareUpdate {
	mcu.mutation.RemovePatientIDs(ids...)
	return mcu
}

// RemovePatients removes patients edges to Patient.
func (mcu *MedicalCareUpdate) RemovePatients(p ...*Patient) *MedicalCareUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mcu.RemovePatientIDs(ids...)
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (mcu *MedicalCareUpdate) RemoveMedicalfileIDs(ids ...int) *MedicalCareUpdate {
	mcu.mutation.RemoveMedicalfileIDs(ids...)
	return mcu
}

// RemoveMedicalfiles removes medicalfiles edges to Medicalfile.
func (mcu *MedicalCareUpdate) RemoveMedicalfiles(m ...*Medicalfile) *MedicalCareUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcu.RemoveMedicalfileIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mcu *MedicalCareUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := mcu.mutation.Name(); ok {
		if err := medicalcare.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(mcu.hooks) == 0 {
		affected, err = mcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalCareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mcu.mutation = mutation
			affected, err = mcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mcu.hooks) - 1; i >= 0; i-- {
			mut = mcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MedicalCareUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MedicalCareUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MedicalCareUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mcu *MedicalCareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalcare.Table,
			Columns: medicalcare.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalcare.FieldID,
			},
		},
	}
	if ps := mcu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalcare.FieldName,
		})
	}
	if nodes := mcu.mutation.RemovedPatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalcare.PatientsTable,
			Columns: []string{medicalcare.PatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcu.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalcare.PatientsTable,
			Columns: []string{medicalcare.PatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := mcu.mutation.RemovedMedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalcare.MedicalfilesTable,
			Columns: []string{medicalcare.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcu.mutation.MedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalcare.MedicalfilesTable,
			Columns: []string{medicalcare.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalcare.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicalCareUpdateOne is the builder for updating a single MedicalCare entity.
type MedicalCareUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicalCareMutation
}

// SetName sets the name field.
func (mcuo *MedicalCareUpdateOne) SetName(s string) *MedicalCareUpdateOne {
	mcuo.mutation.SetName(s)
	return mcuo
}

// AddPatientIDs adds the patients edge to Patient by ids.
func (mcuo *MedicalCareUpdateOne) AddPatientIDs(ids ...int) *MedicalCareUpdateOne {
	mcuo.mutation.AddPatientIDs(ids...)
	return mcuo
}

// AddPatients adds the patients edges to Patient.
func (mcuo *MedicalCareUpdateOne) AddPatients(p ...*Patient) *MedicalCareUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mcuo.AddPatientIDs(ids...)
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (mcuo *MedicalCareUpdateOne) AddMedicalfileIDs(ids ...int) *MedicalCareUpdateOne {
	mcuo.mutation.AddMedicalfileIDs(ids...)
	return mcuo
}

// AddMedicalfiles adds the medicalfiles edges to Medicalfile.
func (mcuo *MedicalCareUpdateOne) AddMedicalfiles(m ...*Medicalfile) *MedicalCareUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcuo.AddMedicalfileIDs(ids...)
}

// Mutation returns the MedicalCareMutation object of the builder.
func (mcuo *MedicalCareUpdateOne) Mutation() *MedicalCareMutation {
	return mcuo.mutation
}

// RemovePatientIDs removes the patients edge to Patient by ids.
func (mcuo *MedicalCareUpdateOne) RemovePatientIDs(ids ...int) *MedicalCareUpdateOne {
	mcuo.mutation.RemovePatientIDs(ids...)
	return mcuo
}

// RemovePatients removes patients edges to Patient.
func (mcuo *MedicalCareUpdateOne) RemovePatients(p ...*Patient) *MedicalCareUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mcuo.RemovePatientIDs(ids...)
}

// RemoveMedicalfileIDs removes the medicalfiles edge to Medicalfile by ids.
func (mcuo *MedicalCareUpdateOne) RemoveMedicalfileIDs(ids ...int) *MedicalCareUpdateOne {
	mcuo.mutation.RemoveMedicalfileIDs(ids...)
	return mcuo
}

// RemoveMedicalfiles removes medicalfiles edges to Medicalfile.
func (mcuo *MedicalCareUpdateOne) RemoveMedicalfiles(m ...*Medicalfile) *MedicalCareUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mcuo.RemoveMedicalfileIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (mcuo *MedicalCareUpdateOne) Save(ctx context.Context) (*MedicalCare, error) {
	if v, ok := mcuo.mutation.Name(); ok {
		if err := medicalcare.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}

	var (
		err  error
		node *MedicalCare
	)
	if len(mcuo.hooks) == 0 {
		node, err = mcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalCareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mcuo.mutation = mutation
			node, err = mcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mcuo.hooks) - 1; i >= 0; i-- {
			mut = mcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MedicalCareUpdateOne) SaveX(ctx context.Context) *MedicalCare {
	mc, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return mc
}

// Exec executes the query on the entity.
func (mcuo *MedicalCareUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MedicalCareUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mcuo *MedicalCareUpdateOne) sqlSave(ctx context.Context) (mc *MedicalCare, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalcare.Table,
			Columns: medicalcare.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalcare.FieldID,
			},
		},
	}
	id, ok := mcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MedicalCare.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalcare.FieldName,
		})
	}
	if nodes := mcuo.mutation.RemovedPatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalcare.PatientsTable,
			Columns: []string{medicalcare.PatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcuo.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalcare.PatientsTable,
			Columns: []string{medicalcare.PatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := mcuo.mutation.RemovedMedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalcare.MedicalfilesTable,
			Columns: []string{medicalcare.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcuo.mutation.MedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   medicalcare.MedicalfilesTable,
			Columns: []string{medicalcare.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	mc = &MedicalCare{config: mcuo.config}
	_spec.Assign = mc.assignValues
	_spec.ScanValues = mc.scanValues()
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalcare.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return mc, nil
}
