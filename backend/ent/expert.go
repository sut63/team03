// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tanapon395/playlist-video/ent/expert"
)

// Expert is the model entity for the Expert schema.
type Expert struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExpertName holds the value of the "expert_name" field.
	ExpertName string `json:"expert_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExpertQuery when eager-loading is set.
	Edges ExpertEdges `json:"edges"`
}

// ExpertEdges holds the relations/edges for other nodes in the graph.
type ExpertEdges struct {
	// Dentists holds the value of the dentists edge.
	Dentists []*Dentist
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DentistsOrErr returns the Dentists value or an error if the edge
// was not loaded in eager-loading.
func (e ExpertEdges) DentistsOrErr() ([]*Dentist, error) {
	if e.loadedTypes[0] {
		return e.Dentists, nil
	}
	return nil, &NotLoadedError{edge: "dentists"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Expert) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // expert_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Expert fields.
func (e *Expert) assignValues(values ...interface{}) error {
	if m, n := len(values), len(expert.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field expert_name", values[0])
	} else if value.Valid {
		e.ExpertName = value.String
	}
	return nil
}

// QueryDentists queries the dentists edge of the Expert.
func (e *Expert) QueryDentists() *DentistQuery {
	return (&ExpertClient{config: e.config}).QueryDentists(e)
}

// Update returns a builder for updating this Expert.
// Note that, you need to call Expert.Unwrap() before calling this method, if this Expert
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Expert) Update() *ExpertUpdateOne {
	return (&ExpertClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Expert) Unwrap() *Expert {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Expert is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Expert) String() string {
	var builder strings.Builder
	builder.WriteString("Expert(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", expert_name=")
	builder.WriteString(e.ExpertName)
	builder.WriteByte(')')
	return builder.String()
}

// Experts is a parsable slice of Expert.
type Experts []*Expert

func (e Experts) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
