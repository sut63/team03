// Code generated by entc, DO NOT EDIT.

package nurse

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team03/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NurseName applies equality check predicate on the "nurse_name" field. It's identical to NurseNameEQ.
func NurseName(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseName), v))
	})
}

// NurseAge applies equality check predicate on the "nurse_age" field. It's identical to NurseAgeEQ.
func NurseAge(v int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseAge), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// NurseNameEQ applies the EQ predicate on the "nurse_name" field.
func NurseNameEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseName), v))
	})
}

// NurseNameNEQ applies the NEQ predicate on the "nurse_name" field.
func NurseNameNEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNurseName), v))
	})
}

// NurseNameIn applies the In predicate on the "nurse_name" field.
func NurseNameIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNurseName), v...))
	})
}

// NurseNameNotIn applies the NotIn predicate on the "nurse_name" field.
func NurseNameNotIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNurseName), v...))
	})
}

// NurseNameGT applies the GT predicate on the "nurse_name" field.
func NurseNameGT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNurseName), v))
	})
}

// NurseNameGTE applies the GTE predicate on the "nurse_name" field.
func NurseNameGTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNurseName), v))
	})
}

// NurseNameLT applies the LT predicate on the "nurse_name" field.
func NurseNameLT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNurseName), v))
	})
}

// NurseNameLTE applies the LTE predicate on the "nurse_name" field.
func NurseNameLTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNurseName), v))
	})
}

// NurseNameContains applies the Contains predicate on the "nurse_name" field.
func NurseNameContains(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNurseName), v))
	})
}

// NurseNameHasPrefix applies the HasPrefix predicate on the "nurse_name" field.
func NurseNameHasPrefix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNurseName), v))
	})
}

// NurseNameHasSuffix applies the HasSuffix predicate on the "nurse_name" field.
func NurseNameHasSuffix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNurseName), v))
	})
}

// NurseNameEqualFold applies the EqualFold predicate on the "nurse_name" field.
func NurseNameEqualFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNurseName), v))
	})
}

// NurseNameContainsFold applies the ContainsFold predicate on the "nurse_name" field.
func NurseNameContainsFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNurseName), v))
	})
}

// NurseAgeEQ applies the EQ predicate on the "nurse_age" field.
func NurseAgeEQ(v int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseAge), v))
	})
}

// NurseAgeNEQ applies the NEQ predicate on the "nurse_age" field.
func NurseAgeNEQ(v int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNurseAge), v))
	})
}

// NurseAgeIn applies the In predicate on the "nurse_age" field.
func NurseAgeIn(vs ...int) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNurseAge), v...))
	})
}

// NurseAgeNotIn applies the NotIn predicate on the "nurse_age" field.
func NurseAgeNotIn(vs ...int) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNurseAge), v...))
	})
}

// NurseAgeGT applies the GT predicate on the "nurse_age" field.
func NurseAgeGT(v int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNurseAge), v))
	})
}

// NurseAgeGTE applies the GTE predicate on the "nurse_age" field.
func NurseAgeGTE(v int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNurseAge), v))
	})
}

// NurseAgeLT applies the LT predicate on the "nurse_age" field.
func NurseAgeLT(v int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNurseAge), v))
	})
}

// NurseAgeLTE applies the LTE predicate on the "nurse_age" field.
func NurseAgeLTE(v int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNurseAge), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// HasQueue applies the HasEdge predicate on the "queue" edge.
func HasQueue() predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QueueTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QueueTable, QueueColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQueueWith applies the HasEdge predicate on the "queue" edge with a given conditions (other predicates).
func HasQueueWith(preds ...predicate.Queue) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QueueInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QueueTable, QueueColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedicalfiles applies the HasEdge predicate on the "medicalfiles" edge.
func HasMedicalfiles() predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MedicalfilesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MedicalfilesTable, MedicalfilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMedicalfilesWith applies the HasEdge predicate on the "medicalfiles" edge with a given conditions (other predicates).
func HasMedicalfilesWith(preds ...predicate.Medicalfile) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MedicalfilesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MedicalfilesTable, MedicalfilesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDentalexpenses applies the HasEdge predicate on the "dentalexpenses" edge.
func HasDentalexpenses() predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentalexpensesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DentalexpensesTable, DentalexpensesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDentalexpensesWith applies the HasEdge predicate on the "dentalexpenses" edge with a given conditions (other predicates).
func HasDentalexpensesWith(preds ...predicate.Dentalexpense) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentalexpensesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DentalexpensesTable, DentalexpensesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatients applies the HasEdge predicate on the "patients" edge.
func HasPatients() predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PatientsTable, PatientsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientsWith applies the HasEdge predicate on the "patients" edge with a given conditions (other predicates).
func HasPatientsWith(preds ...predicate.Patient) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PatientsTable, PatientsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDentists applies the HasEdge predicate on the "dentists" edge.
func HasDentists() predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentistsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DentistsTable, DentistsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDentistsWith applies the HasEdge predicate on the "dentists" edge with a given conditions (other predicates).
func HasDentistsWith(preds ...predicate.Dentist) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DentistsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DentistsTable, DentistsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		p(s.Not())
	})
}
