// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team03/app/ent/appointment"
	"github.com/team03/app/ent/degree"
	"github.com/team03/app/ent/dentist"
	"github.com/team03/app/ent/expert"
	"github.com/team03/app/ent/gender"
	"github.com/team03/app/ent/medicalfile"
	"github.com/team03/app/ent/nurse"
	"github.com/team03/app/ent/queue"
)

// DentistCreate is the builder for creating a Dentist entity.
type DentistCreate struct {
	config
	mutation *DentistMutation
	hooks    []Hook
}

// SetName sets the name field.
func (dc *DentistCreate) SetName(s string) *DentistCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetAge sets the age field.
func (dc *DentistCreate) SetAge(i int) *DentistCreate {
	dc.mutation.SetAge(i)
	return dc
}

// SetCardid sets the cardid field.
func (dc *DentistCreate) SetCardid(s string) *DentistCreate {
	dc.mutation.SetCardid(s)
	return dc
}

// SetBirthday sets the birthday field.
func (dc *DentistCreate) SetBirthday(t time.Time) *DentistCreate {
	dc.mutation.SetBirthday(t)
	return dc
}

// SetExperience sets the experience field.
func (dc *DentistCreate) SetExperience(s string) *DentistCreate {
	dc.mutation.SetExperience(s)
	return dc
}

// SetTel sets the tel field.
func (dc *DentistCreate) SetTel(s string) *DentistCreate {
	dc.mutation.SetTel(s)
	return dc
}

// SetEmail sets the email field.
func (dc *DentistCreate) SetEmail(s string) *DentistCreate {
	dc.mutation.SetEmail(s)
	return dc
}

// SetPassword sets the password field.
func (dc *DentistCreate) SetPassword(s string) *DentistCreate {
	dc.mutation.SetPassword(s)
	return dc
}

// SetNurseID sets the nurse edge to Nurse by id.
func (dc *DentistCreate) SetNurseID(id int) *DentistCreate {
	dc.mutation.SetNurseID(id)
	return dc
}

// SetNillableNurseID sets the nurse edge to Nurse by id if the given value is not nil.
func (dc *DentistCreate) SetNillableNurseID(id *int) *DentistCreate {
	if id != nil {
		dc = dc.SetNurseID(*id)
	}
	return dc
}

// SetNurse sets the nurse edge to Nurse.
func (dc *DentistCreate) SetNurse(n *Nurse) *DentistCreate {
	return dc.SetNurseID(n.ID)
}

// SetDegreeID sets the degree edge to Degree by id.
func (dc *DentistCreate) SetDegreeID(id int) *DentistCreate {
	dc.mutation.SetDegreeID(id)
	return dc
}

// SetNillableDegreeID sets the degree edge to Degree by id if the given value is not nil.
func (dc *DentistCreate) SetNillableDegreeID(id *int) *DentistCreate {
	if id != nil {
		dc = dc.SetDegreeID(*id)
	}
	return dc
}

// SetDegree sets the degree edge to Degree.
func (dc *DentistCreate) SetDegree(d *Degree) *DentistCreate {
	return dc.SetDegreeID(d.ID)
}

// SetExpertID sets the expert edge to Expert by id.
func (dc *DentistCreate) SetExpertID(id int) *DentistCreate {
	dc.mutation.SetExpertID(id)
	return dc
}

// SetNillableExpertID sets the expert edge to Expert by id if the given value is not nil.
func (dc *DentistCreate) SetNillableExpertID(id *int) *DentistCreate {
	if id != nil {
		dc = dc.SetExpertID(*id)
	}
	return dc
}

// SetExpert sets the expert edge to Expert.
func (dc *DentistCreate) SetExpert(e *Expert) *DentistCreate {
	return dc.SetExpertID(e.ID)
}

// SetGenderID sets the gender edge to Gender by id.
func (dc *DentistCreate) SetGenderID(id int) *DentistCreate {
	dc.mutation.SetGenderID(id)
	return dc
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (dc *DentistCreate) SetNillableGenderID(id *int) *DentistCreate {
	if id != nil {
		dc = dc.SetGenderID(*id)
	}
	return dc
}

// SetGender sets the gender edge to Gender.
func (dc *DentistCreate) SetGender(g *Gender) *DentistCreate {
	return dc.SetGenderID(g.ID)
}

// AddMedicalfileIDs adds the medicalfiles edge to Medicalfile by ids.
func (dc *DentistCreate) AddMedicalfileIDs(ids ...int) *DentistCreate {
	dc.mutation.AddMedicalfileIDs(ids...)
	return dc
}

// AddMedicalfiles adds the medicalfiles edges to Medicalfile.
func (dc *DentistCreate) AddMedicalfiles(m ...*Medicalfile) *DentistCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dc.AddMedicalfileIDs(ids...)
}

// AddQueueIDs adds the queue edge to Queue by ids.
func (dc *DentistCreate) AddQueueIDs(ids ...int) *DentistCreate {
	dc.mutation.AddQueueIDs(ids...)
	return dc
}

// AddQueue adds the queue edges to Queue.
func (dc *DentistCreate) AddQueue(q ...*Queue) *DentistCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return dc.AddQueueIDs(ids...)
}

// AddAppointmentIDs adds the appointment edge to Appointment by ids.
func (dc *DentistCreate) AddAppointmentIDs(ids ...int) *DentistCreate {
	dc.mutation.AddAppointmentIDs(ids...)
	return dc
}

// AddAppointment adds the appointment edges to Appointment.
func (dc *DentistCreate) AddAppointment(a ...*Appointment) *DentistCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return dc.AddAppointmentIDs(ids...)
}

// Mutation returns the DentistMutation object of the builder.
func (dc *DentistCreate) Mutation() *DentistMutation {
	return dc.mutation
}

// Save creates the Dentist in the database.
func (dc *DentistCreate) Save(ctx context.Context) (*Dentist, error) {
	if _, ok := dc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := dentist.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Age(); !ok {
		return nil, &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if v, ok := dc.mutation.Age(); ok {
		if err := dentist.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Cardid(); !ok {
		return nil, &ValidationError{Name: "cardid", err: errors.New("ent: missing required field \"cardid\"")}
	}
	if v, ok := dc.mutation.Cardid(); ok {
		if err := dentist.CardidValidator(v); err != nil {
			return nil, &ValidationError{Name: "cardid", err: fmt.Errorf("ent: validator failed for field \"cardid\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Birthday(); !ok {
		return nil, &ValidationError{Name: "birthday", err: errors.New("ent: missing required field \"birthday\"")}
	}
	if _, ok := dc.mutation.Experience(); !ok {
		return nil, &ValidationError{Name: "experience", err: errors.New("ent: missing required field \"experience\"")}
	}
	if v, ok := dc.mutation.Experience(); ok {
		if err := dentist.ExperienceValidator(v); err != nil {
			return nil, &ValidationError{Name: "experience", err: fmt.Errorf("ent: validator failed for field \"experience\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Tel(); !ok {
		return nil, &ValidationError{Name: "tel", err: errors.New("ent: missing required field \"tel\"")}
	}
	if v, ok := dc.mutation.Tel(); ok {
		if err := dentist.TelValidator(v); err != nil {
			return nil, &ValidationError{Name: "tel", err: fmt.Errorf("ent: validator failed for field \"tel\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	if v, ok := dc.mutation.Email(); ok {
		if err := dentist.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "email", err: fmt.Errorf("ent: validator failed for field \"email\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Password(); !ok {
		return nil, &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if v, ok := dc.mutation.Password(); ok {
		if err := dentist.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	var (
		err  error
		node *Dentist
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DentistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DentistCreate) SaveX(ctx context.Context) *Dentist {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DentistCreate) sqlSave(ctx context.Context) (*Dentist, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DentistCreate) createSpec() (*Dentist, *sqlgraph.CreateSpec) {
	var (
		d     = &Dentist{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dentist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dentist.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldName,
		})
		d.Name = value
	}
	if value, ok := dc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dentist.FieldAge,
		})
		d.Age = value
	}
	if value, ok := dc.mutation.Cardid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldCardid,
		})
		d.Cardid = value
	}
	if value, ok := dc.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dentist.FieldBirthday,
		})
		d.Birthday = value
	}
	if value, ok := dc.mutation.Experience(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldExperience,
		})
		d.Experience = value
	}
	if value, ok := dc.mutation.Tel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldTel,
		})
		d.Tel = value
	}
	if value, ok := dc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldEmail,
		})
		d.Email = value
	}
	if value, ok := dc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dentist.FieldPassword,
		})
		d.Password = value
	}
	if nodes := dc.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.NurseTable,
			Columns: []string{dentist.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DegreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.DegreeTable,
			Columns: []string{dentist.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ExpertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.ExpertTable,
			Columns: []string{dentist.ExpertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: expert.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dentist.GenderTable,
			Columns: []string{dentist.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.MedicalfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.MedicalfilesTable,
			Columns: []string{dentist.MedicalfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.QueueTable,
			Columns: []string{dentist.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.AppointmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dentist.AppointmentTable,
			Columns: []string{dentist.AppointmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}
