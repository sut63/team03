// Code generated by entc, DO NOT EDIT.

package dentalexpense

const (
	// Label holds the string label denoting the dentalexpense type in the database.
	Label = "dental_expense"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTax holds the string denoting the tax field in the database.
	FieldTax = "tax"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRates holds the string denoting the rates field in the database.
	FieldRates = "rates"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldAddedTime holds the string denoting the added_time field in the database.
	FieldAddedTime = "added_time"

	// EdgeNurse holds the string denoting the nurse edge name in mutations.
	EdgeNurse = "nurse"
	// EdgeMedicalfile holds the string denoting the medicalfile edge name in mutations.
	EdgeMedicalfile = "medicalfile"
	// EdgePricetype holds the string denoting the pricetype edge name in mutations.
	EdgePricetype = "pricetype"

	// Table holds the table name of the dentalexpense in the database.
	Table = "dental_expenses"
	// NurseTable is the table the holds the nurse relation/edge.
	NurseTable = "dental_expenses"
	// NurseInverseTable is the table name for the Nurse entity.
	// It exists in this package in order to avoid circular dependency with the "nurse" package.
	NurseInverseTable = "nurses"
	// NurseColumn is the table column denoting the nurse relation/edge.
	NurseColumn = "nurse_id"
	// MedicalfileTable is the table the holds the medicalfile relation/edge.
	MedicalfileTable = "dental_expenses"
	// MedicalfileInverseTable is the table name for the Medicalfile entity.
	// It exists in this package in order to avoid circular dependency with the "medicalfile" package.
	MedicalfileInverseTable = "medicalfiles"
	// MedicalfileColumn is the table column denoting the medicalfile relation/edge.
	MedicalfileColumn = "medicalfile_id"
	// PricetypeTable is the table the holds the pricetype relation/edge.
	PricetypeTable = "dental_expenses"
	// PricetypeInverseTable is the table name for the PriceType entity.
	// It exists in this package in order to avoid circular dependency with the "pricetype" package.
	PricetypeInverseTable = "price_types"
	// PricetypeColumn is the table column denoting the pricetype relation/edge.
	PricetypeColumn = "pricetype_id"
)

// Columns holds all SQL columns for dentalexpense fields.
var Columns = []string{
	FieldID,
	FieldTax,
	FieldName,
	FieldRates,
	FieldPhone,
	FieldAddedTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the DentalExpense type.
var ForeignKeys = []string{
	"medicalfile_id",
	"nurse_id",
	"pricetype_id",
}

var (
	// TaxValidator is a validator for the "tax" field. It is called by the builders before save.
	TaxValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// RatesValidator is a validator for the "rates" field. It is called by the builders before save.
	RatesValidator func(int) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
)
