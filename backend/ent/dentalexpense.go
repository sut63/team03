// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team03/app/ent/dentalexpense"
	"github.com/team03/app/ent/medicalfile"
	"github.com/team03/app/ent/nurse"
	"github.com/team03/app/ent/pricetype"
)

// DentalExpense is the model entity for the DentalExpense schema.
type DentalExpense struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DentalExpenseQuery when eager-loading is set.
	Edges          DentalExpenseEdges `json:"edges"`
	medicalfile_id *int
	nurse_id       *int
	pricetype_id   *int
}

// DentalExpenseEdges holds the relations/edges for other nodes in the graph.
type DentalExpenseEdges struct {
	// Nurse holds the value of the nurse edge.
	Nurse *Nurse
	// Medicalfile holds the value of the medicalfile edge.
	Medicalfile *Medicalfile
	// Pricetype holds the value of the pricetype edge.
	Pricetype *PriceType
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// NurseOrErr returns the Nurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentalExpenseEdges) NurseOrErr() (*Nurse, error) {
	if e.loadedTypes[0] {
		if e.Nurse == nil {
			// The edge nurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.Nurse, nil
	}
	return nil, &NotLoadedError{edge: "nurse"}
}

// MedicalfileOrErr returns the Medicalfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentalExpenseEdges) MedicalfileOrErr() (*Medicalfile, error) {
	if e.loadedTypes[1] {
		if e.Medicalfile == nil {
			// The edge medicalfile was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: medicalfile.Label}
		}
		return e.Medicalfile, nil
	}
	return nil, &NotLoadedError{edge: "medicalfile"}
}

// PricetypeOrErr returns the Pricetype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DentalExpenseEdges) PricetypeOrErr() (*PriceType, error) {
	if e.loadedTypes[2] {
		if e.Pricetype == nil {
			// The edge pricetype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pricetype.Label}
		}
		return e.Pricetype, nil
	}
	return nil, &NotLoadedError{edge: "pricetype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DentalExpense) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // added_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*DentalExpense) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // medicalfile_id
		&sql.NullInt64{}, // nurse_id
		&sql.NullInt64{}, // pricetype_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DentalExpense fields.
func (de *DentalExpense) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dentalexpense.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	de.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time", values[0])
	} else if value.Valid {
		de.AddedTime = value.Time
	}
	values = values[1:]
	if len(values) == len(dentalexpense.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field medicalfile_id", value)
		} else if value.Valid {
			de.medicalfile_id = new(int)
			*de.medicalfile_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field nurse_id", value)
		} else if value.Valid {
			de.nurse_id = new(int)
			*de.nurse_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field pricetype_id", value)
		} else if value.Valid {
			de.pricetype_id = new(int)
			*de.pricetype_id = int(value.Int64)
		}
	}
	return nil
}

// QueryNurse queries the nurse edge of the DentalExpense.
func (de *DentalExpense) QueryNurse() *NurseQuery {
	return (&DentalExpenseClient{config: de.config}).QueryNurse(de)
}

// QueryMedicalfile queries the medicalfile edge of the DentalExpense.
func (de *DentalExpense) QueryMedicalfile() *MedicalfileQuery {
	return (&DentalExpenseClient{config: de.config}).QueryMedicalfile(de)
}

// QueryPricetype queries the pricetype edge of the DentalExpense.
func (de *DentalExpense) QueryPricetype() *PriceTypeQuery {
	return (&DentalExpenseClient{config: de.config}).QueryPricetype(de)
}

// Update returns a builder for updating this DentalExpense.
// Note that, you need to call DentalExpense.Unwrap() before calling this method, if this DentalExpense
// was returned from a transaction, and the transaction was committed or rolled back.
func (de *DentalExpense) Update() *DentalExpenseUpdateOne {
	return (&DentalExpenseClient{config: de.config}).UpdateOne(de)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (de *DentalExpense) Unwrap() *DentalExpense {
	tx, ok := de.config.driver.(*txDriver)
	if !ok {
		panic("ent: DentalExpense is not a transactional entity")
	}
	de.config.driver = tx.drv
	return de
}

// String implements the fmt.Stringer.
func (de *DentalExpense) String() string {
	var builder strings.Builder
	builder.WriteString("DentalExpense(")
	builder.WriteString(fmt.Sprintf("id=%v", de.ID))
	builder.WriteString(", added_time=")
	builder.WriteString(de.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DentalExpenses is a parsable slice of DentalExpense.
type DentalExpenses []*DentalExpense

func (de DentalExpenses) config(cfg config) {
	for _i := range de {
		de[_i].config = cfg
	}
}
