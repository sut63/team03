/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntAppointment,
    EntAppointmentFromJSON,
    EntAppointmentFromJSONTyped,
    EntAppointmentToJSON,
    EntDentalexpense,
    EntDentalexpenseFromJSON,
    EntDentalexpenseFromJSONTyped,
    EntDentalexpenseToJSON,
    EntDentist,
    EntDentistFromJSON,
    EntDentistFromJSONTyped,
    EntDentistToJSON,
    EntMedicalfile,
    EntMedicalfileFromJSON,
    EntMedicalfileFromJSONTyped,
    EntMedicalfileToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientFromJSONTyped,
    EntPatientToJSON,
    EntQueue,
    EntQueueFromJSON,
    EntQueueFromJSONTyped,
    EntQueueToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntNurseEdges
 */
export interface EntNurseEdges {
    /**
     * Appointment holds the value of the appointment edge.
     * @type {Array<EntAppointment>}
     * @memberof EntNurseEdges
     */
    appointment?: Array<EntAppointment>;
    /**
     * Dentalexpenses holds the value of the dentalexpenses edge.
     * @type {Array<EntDentalexpense>}
     * @memberof EntNurseEdges
     */
    dentalexpenses?: Array<EntDentalexpense>;
    /**
     * Dentists holds the value of the dentists edge.
     * @type {Array<EntDentist>}
     * @memberof EntNurseEdges
     */
    dentists?: Array<EntDentist>;
    /**
     * Medicalfiles holds the value of the medicalfiles edge.
     * @type {Array<EntMedicalfile>}
     * @memberof EntNurseEdges
     */
    medicalfiles?: Array<EntMedicalfile>;
    /**
     * Patients holds the value of the patients edge.
     * @type {Array<EntPatient>}
     * @memberof EntNurseEdges
     */
    patients?: Array<EntPatient>;
    /**
     * Queue holds the value of the queue edge.
     * @type {Array<EntQueue>}
     * @memberof EntNurseEdges
     */
    queue?: Array<EntQueue>;
}

export function EntNurseEdgesFromJSON(json: any): EntNurseEdges {
    return EntNurseEdgesFromJSONTyped(json, false);
}

export function EntNurseEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntNurseEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appointment': !exists(json, 'appointment') ? undefined : ((json['appointment'] as Array<any>).map(EntAppointmentFromJSON)),
        'dentalexpenses': !exists(json, 'dentalexpenses') ? undefined : ((json['dentalexpenses'] as Array<any>).map(EntDentalexpenseFromJSON)),
        'dentists': !exists(json, 'dentists') ? undefined : ((json['dentists'] as Array<any>).map(EntDentistFromJSON)),
        'medicalfiles': !exists(json, 'medicalfiles') ? undefined : ((json['medicalfiles'] as Array<any>).map(EntMedicalfileFromJSON)),
        'patients': !exists(json, 'patients') ? undefined : ((json['patients'] as Array<any>).map(EntPatientFromJSON)),
        'queue': !exists(json, 'queue') ? undefined : ((json['queue'] as Array<any>).map(EntQueueFromJSON)),
    };
}

export function EntNurseEdgesToJSON(value?: EntNurseEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appointment': value.appointment === undefined ? undefined : ((value.appointment as Array<any>).map(EntAppointmentToJSON)),
        'dentalexpenses': value.dentalexpenses === undefined ? undefined : ((value.dentalexpenses as Array<any>).map(EntDentalexpenseToJSON)),
        'dentists': value.dentists === undefined ? undefined : ((value.dentists as Array<any>).map(EntDentistToJSON)),
        'medicalfiles': value.medicalfiles === undefined ? undefined : ((value.medicalfiles as Array<any>).map(EntMedicalfileToJSON)),
        'patients': value.patients === undefined ? undefined : ((value.patients as Array<any>).map(EntPatientToJSON)),
        'queue': value.queue === undefined ? undefined : ((value.queue as Array<any>).map(EntQueueToJSON)),
    };
}


