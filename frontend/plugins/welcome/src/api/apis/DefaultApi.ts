/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersQueue,
    ControllersQueueFromJSON,
    ControllersQueueToJSON,
    EntAppointment,
    EntAppointmentFromJSON,
    EntAppointmentToJSON,
    EntDegree,
    EntDegreeFromJSON,
    EntDegreeToJSON,
    EntDentalexpense,
    EntDentalexpenseFromJSON,
    EntDentalexpenseToJSON,
    EntDentist,
    EntDentistFromJSON,
    EntDentistToJSON,
    EntDisease,
    EntDiseaseFromJSON,
    EntDiseaseToJSON,
    EntExpert,
    EntExpertFromJSON,
    EntExpertToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntMedicalCare,
    EntMedicalCareFromJSON,
    EntMedicalCareToJSON,
    EntMedicalfile,
    EntMedicalfileFromJSON,
    EntMedicalfileToJSON,
    EntNurse,
    EntNurseFromJSON,
    EntNurseToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntPricetype,
    EntPricetypeFromJSON,
    EntPricetypeToJSON,
    EntQueue,
    EntQueueFromJSON,
    EntQueueToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
} from '../models';

export interface CreateAppointmentRequest {
    appointment: EntAppointment;
}

export interface CreateDegreeRequest {
    degree: EntDegree;
}

export interface CreateDentalexpenseRequest {
    dentalexpense: EntDentalexpense;
}

export interface CreateDentistRequest {
    dentist: EntDentist;
}

export interface CreateExpertRequest {
    expert: EntExpert;
}

export interface CreateGenderRequest {
    gender: EntGender;
}

export interface CreateMedicalfileRequest {
    medicalfile: EntMedicalfile;
}

export interface CreateNurseRequest {
    nurse: EntNurse;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface CreatePricetypeRequest {
    pricetype: EntPricetype;
}

export interface CreateQueueRequest {
    queue: ControllersQueue;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface GetAppointmentRequest {
    id: number;
}

export interface GetDegreeRequest {
    id: number;
}

export interface GetDentalexpenseRequest {
    id: number;
}

export interface GetDentistRequest {
    id: number;
}

export interface GetDiseaseRequest {
    id: number;
}

export interface GetExpertRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetMedicalcareRequest {
    id: number;
}

export interface GetMedicalfileRequest {
    id: number;
}

export interface GetNurseRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetPricetypeRequest {
    id: number;
}

export interface GetQueueRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface ListAppointmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListDegreeRequest {
    limit?: number;
    offset?: number;
}

export interface ListDentalexpenseRequest {
    limit?: number;
    offset?: number;
}

export interface ListDentistRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiseaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListExpertRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicalcareRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicalfileRequest {
    limit?: number;
    offset?: number;
}

export interface ListNurseRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListPricetypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListQueueRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Appointment
     * Create Appointment
     */
    async createAppointmentRaw(requestParameters: CreateAppointmentRequest): Promise<runtime.ApiResponse<EntAppointment>> {
        if (requestParameters.appointment === null || requestParameters.appointment === undefined) {
            throw new runtime.RequiredError('appointment','Required parameter requestParameters.appointment was null or undefined when calling createAppointment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/appointments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAppointmentToJSON(requestParameters.appointment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAppointmentFromJSON(jsonValue));
    }

    /**
     * Create Appointment
     * Create Appointment
     */
    async createAppointment(requestParameters: CreateAppointmentRequest): Promise<EntAppointment> {
        const response = await this.createAppointmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create degree
     * Create degree
     */
    async createDegreeRaw(requestParameters: CreateDegreeRequest): Promise<runtime.ApiResponse<EntDegree>> {
        if (requestParameters.degree === null || requestParameters.degree === undefined) {
            throw new runtime.RequiredError('degree','Required parameter requestParameters.degree was null or undefined when calling createDegree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/degrees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDegreeToJSON(requestParameters.degree),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDegreeFromJSON(jsonValue));
    }

    /**
     * Create degree
     * Create degree
     */
    async createDegree(requestParameters: CreateDegreeRequest): Promise<EntDegree> {
        const response = await this.createDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create dentalexpense
     * Create dentalexpense
     */
    async createDentalexpenseRaw(requestParameters: CreateDentalexpenseRequest): Promise<runtime.ApiResponse<EntDentalexpense>> {
        if (requestParameters.dentalexpense === null || requestParameters.dentalexpense === undefined) {
            throw new runtime.RequiredError('dentalexpense','Required parameter requestParameters.dentalexpense was null or undefined when calling createDentalexpense.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dentalexpenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDentalexpenseToJSON(requestParameters.dentalexpense),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDentalexpenseFromJSON(jsonValue));
    }

    /**
     * Create dentalexpense
     * Create dentalexpense
     */
    async createDentalexpense(requestParameters: CreateDentalexpenseRequest): Promise<EntDentalexpense> {
        const response = await this.createDentalexpenseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create dentist
     * Create dentist
     */
    async createDentistRaw(requestParameters: CreateDentistRequest): Promise<runtime.ApiResponse<EntDentist>> {
        if (requestParameters.dentist === null || requestParameters.dentist === undefined) {
            throw new runtime.RequiredError('dentist','Required parameter requestParameters.dentist was null or undefined when calling createDentist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/dentists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDentistToJSON(requestParameters.dentist),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDentistFromJSON(jsonValue));
    }

    /**
     * Create dentist
     * Create dentist
     */
    async createDentist(requestParameters: CreateDentistRequest): Promise<EntDentist> {
        const response = await this.createDentistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create expert
     * Create expert
     */
    async createExpertRaw(requestParameters: CreateExpertRequest): Promise<runtime.ApiResponse<EntExpert>> {
        if (requestParameters.expert === null || requestParameters.expert === undefined) {
            throw new runtime.RequiredError('expert','Required parameter requestParameters.expert was null or undefined when calling createExpert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/experts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntExpertToJSON(requestParameters.expert),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntExpertFromJSON(jsonValue));
    }

    /**
     * Create expert
     * Create expert
     */
    async createExpert(requestParameters: CreateExpertRequest): Promise<EntExpert> {
        const response = await this.createExpertRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create gender
     * Create gender
     */
    async createGenderRaw(requestParameters: CreateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling createGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * Create gender
     * Create gender
     */
    async createGender(requestParameters: CreateGenderRequest): Promise<EntGender> {
        const response = await this.createGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medicalfile
     * Create medicalfile
     */
    async createMedicalfileRaw(requestParameters: CreateMedicalfileRequest): Promise<runtime.ApiResponse<EntMedicalfile>> {
        if (requestParameters.medicalfile === null || requestParameters.medicalfile === undefined) {
            throw new runtime.RequiredError('medicalfile','Required parameter requestParameters.medicalfile was null or undefined when calling createMedicalfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicalfiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicalfileToJSON(requestParameters.medicalfile),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalfileFromJSON(jsonValue));
    }

    /**
     * Create medicalfile
     * Create medicalfile
     */
    async createMedicalfile(requestParameters: CreateMedicalfileRequest): Promise<EntMedicalfile> {
        const response = await this.createMedicalfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurseRaw(requestParameters: CreateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling createNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurse(requestParameters: CreateNurseRequest): Promise<EntNurse> {
        const response = await this.createNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create pricetype
     * Create pricetype
     */
    async createPricetypeRaw(requestParameters: CreatePricetypeRequest): Promise<runtime.ApiResponse<EntPricetype>> {
        if (requestParameters.pricetype === null || requestParameters.pricetype === undefined) {
            throw new runtime.RequiredError('pricetype','Required parameter requestParameters.pricetype was null or undefined when calling createPricetype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pricetypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPricetypeToJSON(requestParameters.pricetype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPricetypeFromJSON(jsonValue));
    }

    /**
     * Create pricetype
     * Create pricetype
     */
    async createPricetype(requestParameters: CreatePricetypeRequest): Promise<EntPricetype> {
        const response = await this.createPricetypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create queue
     * Create queue
     */
    async createQueueRaw(requestParameters: CreateQueueRequest): Promise<runtime.ApiResponse<ControllersQueue>> {
        if (requestParameters.queue === null || requestParameters.queue === undefined) {
            throw new runtime.RequiredError('queue','Required parameter requestParameters.queue was null or undefined when calling createQueue.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/queues`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersQueueToJSON(requestParameters.queue),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersQueueFromJSON(jsonValue));
    }

    /**
     * Create queue
     * Create queue
     */
    async createQueue(requestParameters: CreateQueueRequest): Promise<ControllersQueue> {
        const response = await this.createQueueRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Room
     * Create Room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create Room
     * Create Room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Appointment by ID
     * Get a Appointment entity by ID
     */
    async getAppointmentRaw(requestParameters: GetAppointmentRequest): Promise<runtime.ApiResponse<EntAppointment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAppointment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAppointmentFromJSON(jsonValue));
    }

    /**
     * get Appointment by ID
     * Get a Appointment entity by ID
     */
    async getAppointment(requestParameters: GetAppointmentRequest): Promise<EntAppointment> {
        const response = await this.getAppointmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get degree by ID
     * Get a Degree entity by ID
     */
    async getDegreeRaw(requestParameters: GetDegreeRequest): Promise<runtime.ApiResponse<EntDegree>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDegree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degrees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDegreeFromJSON(jsonValue));
    }

    /**
     * get degree by ID
     * Get a Degree entity by ID
     */
    async getDegree(requestParameters: GetDegreeRequest): Promise<EntDegree> {
        const response = await this.getDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Dentalexpense by ID
     * Get a Dentalexpense entity by ID
     */
    async getDentalexpenseRaw(requestParameters: GetDentalexpenseRequest): Promise<runtime.ApiResponse<EntDentalexpense>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDentalexpense.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dentalexpenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDentalexpenseFromJSON(jsonValue));
    }

    /**
     * get Dentalexpense by ID
     * Get a Dentalexpense entity by ID
     */
    async getDentalexpense(requestParameters: GetDentalexpenseRequest): Promise<EntDentalexpense> {
        const response = await this.getDentalexpenseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get dentist by ID
     * Get a dentist entity by ID
     */
    async getDentistRaw(requestParameters: GetDentistRequest): Promise<runtime.ApiResponse<EntDentist>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDentist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dentists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDentistFromJSON(jsonValue));
    }

    /**
     * get dentist by ID
     * Get a dentist entity by ID
     */
    async getDentist(requestParameters: GetDentistRequest): Promise<EntDentist> {
        const response = await this.getDentistRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDiseaseRaw(requestParameters: GetDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDisease(requestParameters: GetDiseaseRequest): Promise<EntDisease> {
        const response = await this.getDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get expert by ID
     * Get a expert entity by ID
     */
    async getExpertRaw(requestParameters: GetExpertRequest): Promise<runtime.ApiResponse<EntExpert>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getExpert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/experts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntExpertFromJSON(jsonValue));
    }

    /**
     * get expert by ID
     * Get a expert entity by ID
     */
    async getExpert(requestParameters: GetExpertRequest): Promise<EntExpert> {
        const response = await this.getExpertRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicalcare by ID
     * Get a medicalcare entity by ID
     */
    async getMedicalcareRaw(requestParameters: GetMedicalcareRequest): Promise<runtime.ApiResponse<EntMedicalCare>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicalcare.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalcares/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalCareFromJSON(jsonValue));
    }

    /**
     * get medicalcare by ID
     * Get a medicalcare entity by ID
     */
    async getMedicalcare(requestParameters: GetMedicalcareRequest): Promise<EntMedicalCare> {
        const response = await this.getMedicalcareRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Medicalfile by ID
     * Get a Medicalfile entity by ID
     */
    async getMedicalfileRaw(requestParameters: GetMedicalfileRequest): Promise<runtime.ApiResponse<EntMedicalfile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicalfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalfiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalfileFromJSON(jsonValue));
    }

    /**
     * get Medicalfile by ID
     * Get a Medicalfile entity by ID
     */
    async getMedicalfile(requestParameters: GetMedicalfileRequest): Promise<EntMedicalfile> {
        const response = await this.getMedicalfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurseRaw(requestParameters: GetNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurse(requestParameters: GetNurseRequest): Promise<EntNurse> {
        const response = await this.getNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get pricetype by ID
     * Get a pricetype entity by ID
     */
    async getPricetypeRaw(requestParameters: GetPricetypeRequest): Promise<runtime.ApiResponse<EntPricetype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPricetype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pricetypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPricetypeFromJSON(jsonValue));
    }

    /**
     * get pricetype by ID
     * Get a pricetype entity by ID
     */
    async getPricetype(requestParameters: GetPricetypeRequest): Promise<EntPricetype> {
        const response = await this.getPricetypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get queue by ID
     * Get a queue entity by ID
     */
    async getQueueRaw(requestParameters: GetQueueRequest): Promise<runtime.ApiResponse<EntQueue>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getQueue.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/queues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntQueueFromJSON(jsonValue));
    }

    /**
     * get queue by ID
     * Get a queue entity by ID
     */
    async getQueue(requestParameters: GetQueueRequest): Promise<EntQueue> {
        const response = await this.getQueueRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Room by ID
     * Get a Room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get Room by ID
     * Get a Room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list appointment entities
     * List appointment entities
     */
    async listAppointmentRaw(requestParameters: ListAppointmentRequest): Promise<runtime.ApiResponse<Array<EntAppointment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAppointmentFromJSON));
    }

    /**
     * list appointment entities
     * List appointment entities
     */
    async listAppointment(requestParameters: ListAppointmentRequest): Promise<Array<EntAppointment>> {
        const response = await this.listAppointmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list degree entities
     * List degree entities
     */
    async listDegreeRaw(requestParameters: ListDegreeRequest): Promise<runtime.ApiResponse<Array<EntDegree>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degrees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDegreeFromJSON));
    }

    /**
     * list degree entities
     * List degree entities
     */
    async listDegree(requestParameters: ListDegreeRequest): Promise<Array<EntDegree>> {
        const response = await this.listDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Dentalexpense entities
     * List Dentalexpense entities
     */
    async listDentalexpenseRaw(requestParameters: ListDentalexpenseRequest): Promise<runtime.ApiResponse<Array<EntDentalexpense>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dentalexpenses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDentalexpenseFromJSON));
    }

    /**
     * list Dentalexpense entities
     * List Dentalexpense entities
     */
    async listDentalexpense(requestParameters: ListDentalexpenseRequest): Promise<Array<EntDentalexpense>> {
        const response = await this.listDentalexpenseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list dentist entities
     * List dentist entities
     */
    async listDentistRaw(requestParameters: ListDentistRequest): Promise<runtime.ApiResponse<Array<EntDentist>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dentists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDentistFromJSON));
    }

    /**
     * list dentist entities
     * List dentist entities
     */
    async listDentist(requestParameters: ListDentistRequest): Promise<Array<EntDentist>> {
        const response = await this.listDentistRaw(requestParameters);
        return await response.value();
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDiseaseRaw(requestParameters: ListDiseaseRequest): Promise<runtime.ApiResponse<Array<EntDisease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiseaseFromJSON));
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDisease(requestParameters: ListDiseaseRequest): Promise<Array<EntDisease>> {
        const response = await this.listDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list expert entities
     * List expert entities
     */
    async listExpertRaw(requestParameters: ListExpertRequest): Promise<runtime.ApiResponse<Array<EntExpert>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/experts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntExpertFromJSON));
    }

    /**
     * list expert entities
     * List expert entities
     */
    async listExpert(requestParameters: ListExpertRequest): Promise<Array<EntExpert>> {
        const response = await this.listExpertRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list medicalcare entities
     * List medicalcare entities
     */
    async listMedicalcareRaw(requestParameters: ListMedicalcareRequest): Promise<runtime.ApiResponse<Array<EntMedicalCare>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalcares`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicalCareFromJSON));
    }

    /**
     * list medicalcare entities
     * List medicalcare entities
     */
    async listMedicalcare(requestParameters: ListMedicalcareRequest): Promise<Array<EntMedicalCare>> {
        const response = await this.listMedicalcareRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Medicalfile entities
     * List Medicalfile entities
     */
    async listMedicalfileRaw(requestParameters: ListMedicalfileRequest): Promise<runtime.ApiResponse<Array<EntMedicalfile>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalfiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicalfileFromJSON));
    }

    /**
     * list Medicalfile entities
     * List Medicalfile entities
     */
    async listMedicalfile(requestParameters: ListMedicalfileRequest): Promise<Array<EntMedicalfile>> {
        const response = await this.listMedicalfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurseRaw(requestParameters: ListNurseRequest): Promise<runtime.ApiResponse<Array<EntNurse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNurseFromJSON));
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurse(requestParameters: ListNurseRequest): Promise<Array<EntNurse>> {
        const response = await this.listNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list pricetype entities
     * List pricetype entities
     */
    async listPricetypeRaw(requestParameters: ListPricetypeRequest): Promise<runtime.ApiResponse<Array<EntPricetype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pricetypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPricetypeFromJSON));
    }

    /**
     * list pricetype entities
     * List pricetype entities
     */
    async listPricetype(requestParameters: ListPricetypeRequest): Promise<Array<EntPricetype>> {
        const response = await this.listPricetypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list queue entities
     * List queue entities
     */
    async listQueueRaw(requestParameters: ListQueueRequest): Promise<runtime.ApiResponse<Array<EntQueue>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/queues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntQueueFromJSON));
    }

    /**
     * list queue entities
     * List queue entities
     */
    async listQueue(requestParameters: ListQueueRequest): Promise<Array<EntQueue>> {
        const response = await this.listQueueRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Room entities
     * List Room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list Room entities
     * List Room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

}
